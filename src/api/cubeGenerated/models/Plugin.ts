/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Type4beEnum } from './Type4beEnum';
import {
    Type4beEnumFromJSON,
    Type4beEnumFromJSONTyped,
    Type4beEnumToJSON,
} from './Type4beEnum';

/**
 * 
 * @export
 * @interface Plugin
 */
export interface Plugin {
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Plugin
     */
    readonly creationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly name: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    version: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    dockImage: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly publicRepo: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly icon: string;
    /**
     * 
     * @type {Type4beEnum}
     * @memberof Plugin
     */
    readonly type: Type4beEnum;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    readonly stars: number;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly authors: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly title: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly category: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly documentation: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly license: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    execshell: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    selfpath: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    selfexec: string;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    minNumberOfWorkers?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    maxNumberOfWorkers?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    minCpuLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    maxCpuLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    minMemoryLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    maxMemoryLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    minGpuLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Plugin
     */
    maxGpuLimit?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly meta: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly parameters: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly instances: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    readonly computeResources: string;
}



/**
 * Check if a given object implements the Plugin interface.
 */
export function instanceOfPlugin(value: object): value is Plugin {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('creationDate' in value) || value['creationDate'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('dockImage' in value) || value['dockImage'] === undefined) return false;
    if (!('publicRepo' in value) || value['publicRepo'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('stars' in value) || value['stars'] === undefined) return false;
    if (!('authors' in value) || value['authors'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('documentation' in value) || value['documentation'] === undefined) return false;
    if (!('license' in value) || value['license'] === undefined) return false;
    if (!('execshell' in value) || value['execshell'] === undefined) return false;
    if (!('selfpath' in value) || value['selfpath'] === undefined) return false;
    if (!('selfexec' in value) || value['selfexec'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    if (!('parameters' in value) || value['parameters'] === undefined) return false;
    if (!('instances' in value) || value['instances'] === undefined) return false;
    if (!('computeResources' in value) || value['computeResources'] === undefined) return false;
    return true;
}

export function PluginFromJSON(json: any): Plugin {
    return PluginFromJSONTyped(json, false);
}

export function PluginFromJSONTyped(json: any, ignoreDiscriminator: boolean): Plugin {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'creationDate': (new Date(json['creation_date'])),
        'name': json['name'],
        'version': json['version'],
        'dockImage': json['dock_image'],
        'publicRepo': json['public_repo'],
        'icon': json['icon'],
        'type': Type4beEnumFromJSON(json['type']),
        'stars': json['stars'],
        'authors': json['authors'],
        'title': json['title'],
        'category': json['category'],
        'description': json['description'] == null ? undefined : json['description'],
        'documentation': json['documentation'],
        'license': json['license'],
        'execshell': json['execshell'],
        'selfpath': json['selfpath'],
        'selfexec': json['selfexec'],
        'minNumberOfWorkers': json['min_number_of_workers'] == null ? undefined : json['min_number_of_workers'],
        'maxNumberOfWorkers': json['max_number_of_workers'] == null ? undefined : json['max_number_of_workers'],
        'minCpuLimit': json['min_cpu_limit'] == null ? undefined : json['min_cpu_limit'],
        'maxCpuLimit': json['max_cpu_limit'] == null ? undefined : json['max_cpu_limit'],
        'minMemoryLimit': json['min_memory_limit'] == null ? undefined : json['min_memory_limit'],
        'maxMemoryLimit': json['max_memory_limit'] == null ? undefined : json['max_memory_limit'],
        'minGpuLimit': json['min_gpu_limit'] == null ? undefined : json['min_gpu_limit'],
        'maxGpuLimit': json['max_gpu_limit'] == null ? undefined : json['max_gpu_limit'],
        'meta': json['meta'],
        'parameters': json['parameters'],
        'instances': json['instances'],
        'computeResources': json['compute_resources'],
    };
}

export function PluginToJSON(value?: Omit<Plugin, 'url'|'id'|'creation_date'|'name'|'public_repo'|'icon'|'type'|'stars'|'authors'|'title'|'category'|'documentation'|'license'|'meta'|'parameters'|'instances'|'compute_resources'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'version': value['version'],
        'dock_image': value['dockImage'],
        'description': value['description'],
        'execshell': value['execshell'],
        'selfpath': value['selfpath'],
        'selfexec': value['selfexec'],
        'min_number_of_workers': value['minNumberOfWorkers'],
        'max_number_of_workers': value['maxNumberOfWorkers'],
        'min_cpu_limit': value['minCpuLimit'],
        'max_cpu_limit': value['maxCpuLimit'],
        'min_memory_limit': value['minMemoryLimit'],
        'max_memory_limit': value['maxMemoryLimit'],
        'min_gpu_limit': value['minGpuLimit'],
        'max_gpu_limit': value['maxGpuLimit'],
    };
}

