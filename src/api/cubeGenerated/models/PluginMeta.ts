/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Type4beEnum } from './Type4beEnum';
import {
    Type4beEnumFromJSON,
    Type4beEnumFromJSONTyped,
    Type4beEnumToJSON,
} from './Type4beEnum';

/**
 * 
 * @export
 * @interface PluginMeta
 */
export interface PluginMeta {
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof PluginMeta
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof PluginMeta
     */
    readonly creationDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof PluginMeta
     */
    readonly modificationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof PluginMeta
     */
    stars?: number;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    publicRepo?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    license?: string;
    /**
     * 
     * @type {Type4beEnum}
     * @memberof PluginMeta
     */
    type?: Type4beEnum;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    authors?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    documentation?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMeta
     */
    readonly plugins: string;
}



/**
 * Check if a given object implements the PluginMeta interface.
 */
export function instanceOfPluginMeta(value: object): value is PluginMeta {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('creationDate' in value) || value['creationDate'] === undefined) return false;
    if (!('modificationDate' in value) || value['modificationDate'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('plugins' in value) || value['plugins'] === undefined) return false;
    return true;
}

export function PluginMetaFromJSON(json: any): PluginMeta {
    return PluginMetaFromJSONTyped(json, false);
}

export function PluginMetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginMeta {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'creationDate': (new Date(json['creation_date'])),
        'modificationDate': (new Date(json['modification_date'])),
        'name': json['name'],
        'title': json['title'] == null ? undefined : json['title'],
        'stars': json['stars'] == null ? undefined : json['stars'],
        'publicRepo': json['public_repo'] == null ? undefined : json['public_repo'],
        'license': json['license'] == null ? undefined : json['license'],
        'type': json['type'] == null ? undefined : Type4beEnumFromJSON(json['type']),
        'icon': json['icon'] == null ? undefined : json['icon'],
        'category': json['category'] == null ? undefined : json['category'],
        'authors': json['authors'] == null ? undefined : json['authors'],
        'documentation': json['documentation'] == null ? undefined : json['documentation'],
        'plugins': json['plugins'],
    };
}

export function PluginMetaToJSON(value?: Omit<PluginMeta, 'url'|'id'|'creation_date'|'modification_date'|'plugins'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'title': value['title'],
        'stars': value['stars'],
        'public_repo': value['publicRepo'],
        'license': value['license'],
        'type': Type4beEnumToJSON(value['type']),
        'icon': value['icon'],
        'category': value['category'],
        'authors': value['authors'],
        'documentation': value['documentation'],
    };
}

