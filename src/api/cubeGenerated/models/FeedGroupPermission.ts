/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FeedGroupPermission
 */
export interface FeedGroupPermission {
    /**
     * 
     * @type {string}
     * @memberof FeedGroupPermission
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof FeedGroupPermission
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof FeedGroupPermission
     */
    readonly feedId: number;
    /**
     * 
     * @type {string}
     * @memberof FeedGroupPermission
     */
    readonly feedName: string;
    /**
     * 
     * @type {number}
     * @memberof FeedGroupPermission
     */
    readonly groupId: number;
    /**
     * 
     * @type {string}
     * @memberof FeedGroupPermission
     */
    readonly groupName: string;
    /**
     * 
     * @type {string}
     * @memberof FeedGroupPermission
     */
    readonly feed: string;
    /**
     * 
     * @type {string}
     * @memberof FeedGroupPermission
     */
    readonly group: string;
}

/**
 * Check if a given object implements the FeedGroupPermission interface.
 */
export function instanceOfFeedGroupPermission(value: object): value is FeedGroupPermission {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('feedId' in value) || value['feedId'] === undefined) return false;
    if (!('feedName' in value) || value['feedName'] === undefined) return false;
    if (!('groupId' in value) || value['groupId'] === undefined) return false;
    if (!('groupName' in value) || value['groupName'] === undefined) return false;
    if (!('feed' in value) || value['feed'] === undefined) return false;
    if (!('group' in value) || value['group'] === undefined) return false;
    return true;
}

export function FeedGroupPermissionFromJSON(json: any): FeedGroupPermission {
    return FeedGroupPermissionFromJSONTyped(json, false);
}

export function FeedGroupPermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedGroupPermission {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'feedId': json['feed_id'],
        'feedName': json['feed_name'],
        'groupId': json['group_id'],
        'groupName': json['group_name'],
        'feed': json['feed'],
        'group': json['group'],
    };
}

export function FeedGroupPermissionToJSON(value?: Omit<FeedGroupPermission, 'url'|'id'|'feed_id'|'feed_name'|'group_id'|'group_name'|'feed'|'group'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
    };
}

