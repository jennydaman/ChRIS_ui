/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PluginInstanceSplit
 */
export interface PluginInstanceSplit {
    /**
     * 
     * @type {string}
     * @memberof PluginInstanceSplit
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof PluginInstanceSplit
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof PluginInstanceSplit
     */
    readonly creationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof PluginInstanceSplit
     */
    filter?: string;
    /**
     * 
     * @type {number}
     * @memberof PluginInstanceSplit
     */
    readonly pluginInstId: number;
    /**
     * 
     * @type {string}
     * @memberof PluginInstanceSplit
     */
    readonly createdPluginInstIds: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstanceSplit
     */
    readonly pluginInst: string;
}

/**
 * Check if a given object implements the PluginInstanceSplit interface.
 */
export function instanceOfPluginInstanceSplit(value: object): value is PluginInstanceSplit {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('creationDate' in value) || value['creationDate'] === undefined) return false;
    if (!('pluginInstId' in value) || value['pluginInstId'] === undefined) return false;
    if (!('createdPluginInstIds' in value) || value['createdPluginInstIds'] === undefined) return false;
    if (!('pluginInst' in value) || value['pluginInst'] === undefined) return false;
    return true;
}

export function PluginInstanceSplitFromJSON(json: any): PluginInstanceSplit {
    return PluginInstanceSplitFromJSONTyped(json, false);
}

export function PluginInstanceSplitFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginInstanceSplit {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'creationDate': (new Date(json['creation_date'])),
        'filter': json['filter'] == null ? undefined : json['filter'],
        'pluginInstId': json['plugin_inst_id'],
        'createdPluginInstIds': json['created_plugin_inst_ids'],
        'pluginInst': json['plugin_inst'],
    };
}

export function PluginInstanceSplitToJSON(value?: Omit<PluginInstanceSplit, 'url'|'id'|'creation_date'|'plugin_inst_id'|'created_plugin_inst_ids'|'plugin_inst'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'filter': value['filter'],
    };
}

