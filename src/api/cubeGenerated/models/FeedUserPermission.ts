/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FeedUserPermission
 */
export interface FeedUserPermission {
    /**
     * 
     * @type {string}
     * @memberof FeedUserPermission
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof FeedUserPermission
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof FeedUserPermission
     */
    readonly feedId: number;
    /**
     * 
     * @type {string}
     * @memberof FeedUserPermission
     */
    readonly feedName: string;
    /**
     * 
     * @type {number}
     * @memberof FeedUserPermission
     */
    readonly userId: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof FeedUserPermission
     */
    readonly userUsername: string;
    /**
     * 
     * @type {string}
     * @memberof FeedUserPermission
     */
    readonly feed: string;
    /**
     * 
     * @type {string}
     * @memberof FeedUserPermission
     */
    readonly user: string;
}

/**
 * Check if a given object implements the FeedUserPermission interface.
 */
export function instanceOfFeedUserPermission(value: object): value is FeedUserPermission {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('feedId' in value) || value['feedId'] === undefined) return false;
    if (!('feedName' in value) || value['feedName'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('userUsername' in value) || value['userUsername'] === undefined) return false;
    if (!('feed' in value) || value['feed'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function FeedUserPermissionFromJSON(json: any): FeedUserPermission {
    return FeedUserPermissionFromJSONTyped(json, false);
}

export function FeedUserPermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedUserPermission {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'feedId': json['feed_id'],
        'feedName': json['feed_name'],
        'userId': json['user_id'],
        'userUsername': json['user_username'],
        'feed': json['feed'],
        'user': json['user'],
    };
}

export function FeedUserPermissionToJSON(value?: Omit<FeedUserPermission, 'url'|'id'|'feed_id'|'feed_name'|'user_id'|'user_username'|'feed'|'user'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
    };
}

