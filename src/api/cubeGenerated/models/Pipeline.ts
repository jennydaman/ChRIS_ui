/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Pipeline
 */
export interface Pipeline {
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof Pipeline
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof Pipeline
     */
    locked?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    authors?: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    description?: string;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof Pipeline
     */
    readonly ownerUsername: string;
    /**
     * 
     * @type {Date}
     * @memberof Pipeline
     */
    readonly creationDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof Pipeline
     */
    readonly modificationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    readonly plugins: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    readonly pluginPipings: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    readonly defaultParameters: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    readonly workflows: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    readonly jsonRepr: string;
}

/**
 * Check if a given object implements the Pipeline interface.
 */
export function instanceOfPipeline(value: object): value is Pipeline {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('ownerUsername' in value) || value['ownerUsername'] === undefined) return false;
    if (!('creationDate' in value) || value['creationDate'] === undefined) return false;
    if (!('modificationDate' in value) || value['modificationDate'] === undefined) return false;
    if (!('plugins' in value) || value['plugins'] === undefined) return false;
    if (!('pluginPipings' in value) || value['pluginPipings'] === undefined) return false;
    if (!('defaultParameters' in value) || value['defaultParameters'] === undefined) return false;
    if (!('workflows' in value) || value['workflows'] === undefined) return false;
    if (!('jsonRepr' in value) || value['jsonRepr'] === undefined) return false;
    return true;
}

export function PipelineFromJSON(json: any): Pipeline {
    return PipelineFromJSONTyped(json, false);
}

export function PipelineFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pipeline {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'name': json['name'],
        'locked': json['locked'] == null ? undefined : json['locked'],
        'authors': json['authors'] == null ? undefined : json['authors'],
        'category': json['category'] == null ? undefined : json['category'],
        'description': json['description'] == null ? undefined : json['description'],
        'ownerUsername': json['owner_username'],
        'creationDate': (new Date(json['creation_date'])),
        'modificationDate': (new Date(json['modification_date'])),
        'plugins': json['plugins'],
        'pluginPipings': json['plugin_pipings'],
        'defaultParameters': json['default_parameters'],
        'workflows': json['workflows'],
        'jsonRepr': json['json_repr'],
    };
}

export function PipelineToJSON(value?: Omit<Pipeline, 'url'|'id'|'owner_username'|'creation_date'|'modification_date'|'plugins'|'plugin_pipings'|'default_parameters'|'workflows'|'json_repr'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'locked': value['locked'],
        'authors': value['authors'],
        'category': value['category'],
        'description': value['description'],
    };
}

