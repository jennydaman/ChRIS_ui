/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StatusEnum } from './StatusEnum';
import {
    StatusEnumFromJSON,
    StatusEnumFromJSONTyped,
    StatusEnumToJSON,
} from './StatusEnum';
import type { PluginTypeEnum } from './PluginTypeEnum';
import {
    PluginTypeEnumFromJSON,
    PluginTypeEnumFromJSONTyped,
    PluginTypeEnumToJSON,
} from './PluginTypeEnum';

/**
 * 
 * @export
 * @interface PluginInstance
 */
export interface PluginInstance {
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    readonly previousId: number;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    computeResourceName?: string;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    readonly pluginId: number;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly pluginName: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly pluginVersion: string;
    /**
     * 
     * @type {PluginTypeEnum}
     * @memberof PluginInstance
     */
    readonly pluginType: PluginTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    readonly feedId: number;
    /**
     * 
     * @type {Date}
     * @memberof PluginInstance
     */
    readonly startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof PluginInstance
     */
    readonly endDate: Date;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly outputPath: string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof PluginInstance
     */
    status?: StatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    readonly pipelineId: number;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly pipelineName: string;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    readonly workflowId: number;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly summary: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly raw: string;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof PluginInstance
     */
    readonly ownerUsername: string;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    cpuLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    memoryLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    numberOfWorkers?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    gpuLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PluginInstance
     */
    readonly size: number;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly errorCode: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly outputFolder: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly previous: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly feed: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly plugin: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly workflow: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly computeResource: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly descendants: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly parameters: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInstance
     */
    readonly splits: string;
}



/**
 * Check if a given object implements the PluginInstance interface.
 */
export function instanceOfPluginInstance(value: object): value is PluginInstance {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('previousId' in value) || value['previousId'] === undefined) return false;
    if (!('pluginId' in value) || value['pluginId'] === undefined) return false;
    if (!('pluginName' in value) || value['pluginName'] === undefined) return false;
    if (!('pluginVersion' in value) || value['pluginVersion'] === undefined) return false;
    if (!('pluginType' in value) || value['pluginType'] === undefined) return false;
    if (!('feedId' in value) || value['feedId'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('endDate' in value) || value['endDate'] === undefined) return false;
    if (!('outputPath' in value) || value['outputPath'] === undefined) return false;
    if (!('pipelineId' in value) || value['pipelineId'] === undefined) return false;
    if (!('pipelineName' in value) || value['pipelineName'] === undefined) return false;
    if (!('workflowId' in value) || value['workflowId'] === undefined) return false;
    if (!('summary' in value) || value['summary'] === undefined) return false;
    if (!('raw' in value) || value['raw'] === undefined) return false;
    if (!('ownerUsername' in value) || value['ownerUsername'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('errorCode' in value) || value['errorCode'] === undefined) return false;
    if (!('outputFolder' in value) || value['outputFolder'] === undefined) return false;
    if (!('previous' in value) || value['previous'] === undefined) return false;
    if (!('feed' in value) || value['feed'] === undefined) return false;
    if (!('plugin' in value) || value['plugin'] === undefined) return false;
    if (!('workflow' in value) || value['workflow'] === undefined) return false;
    if (!('computeResource' in value) || value['computeResource'] === undefined) return false;
    if (!('descendants' in value) || value['descendants'] === undefined) return false;
    if (!('parameters' in value) || value['parameters'] === undefined) return false;
    if (!('splits' in value) || value['splits'] === undefined) return false;
    return true;
}

export function PluginInstanceFromJSON(json: any): PluginInstance {
    return PluginInstanceFromJSONTyped(json, false);
}

export function PluginInstanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginInstance {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'title': json['title'] == null ? undefined : json['title'],
        'previousId': json['previous_id'],
        'computeResourceName': json['compute_resource_name'] == null ? undefined : json['compute_resource_name'],
        'pluginId': json['plugin_id'],
        'pluginName': json['plugin_name'],
        'pluginVersion': json['plugin_version'],
        'pluginType': PluginTypeEnumFromJSON(json['plugin_type']),
        'feedId': json['feed_id'],
        'startDate': (new Date(json['start_date'])),
        'endDate': (new Date(json['end_date'])),
        'outputPath': json['output_path'],
        'status': json['status'] == null ? undefined : StatusEnumFromJSON(json['status']),
        'pipelineId': json['pipeline_id'],
        'pipelineName': json['pipeline_name'],
        'workflowId': json['workflow_id'],
        'summary': json['summary'],
        'raw': json['raw'],
        'ownerUsername': json['owner_username'],
        'cpuLimit': json['cpu_limit'] == null ? undefined : json['cpu_limit'],
        'memoryLimit': json['memory_limit'] == null ? undefined : json['memory_limit'],
        'numberOfWorkers': json['number_of_workers'] == null ? undefined : json['number_of_workers'],
        'gpuLimit': json['gpu_limit'] == null ? undefined : json['gpu_limit'],
        'size': json['size'],
        'errorCode': json['error_code'],
        'outputFolder': json['output_folder'],
        'previous': json['previous'],
        'feed': json['feed'],
        'plugin': json['plugin'],
        'workflow': json['workflow'],
        'computeResource': json['compute_resource'],
        'descendants': json['descendants'],
        'parameters': json['parameters'],
        'splits': json['splits'],
    };
}

export function PluginInstanceToJSON(value?: Omit<PluginInstance, 'url'|'id'|'previous_id'|'plugin_id'|'plugin_name'|'plugin_version'|'plugin_type'|'feed_id'|'start_date'|'end_date'|'output_path'|'pipeline_id'|'pipeline_name'|'workflow_id'|'summary'|'raw'|'owner_username'|'size'|'error_code'|'output_folder'|'previous'|'feed'|'plugin'|'workflow'|'compute_resource'|'descendants'|'parameters'|'splits'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'title': value['title'],
        'compute_resource_name': value['computeResourceName'],
        'status': StatusEnumToJSON(value['status']),
        'cpu_limit': value['cpuLimit'],
        'memory_limit': value['memoryLimit'],
        'number_of_workers': value['numberOfWorkers'],
        'gpu_limit': value['gpuLimit'],
    };
}

