/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Feed
 */
export interface Feed {
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof Feed
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Feed
     */
    readonly creationDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof Feed
     */
    readonly modificationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Feed
     */
    _public?: boolean;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof Feed
     */
    readonly ownerUsername: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly folderPath: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly createdJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly waitingJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly scheduledJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly startedJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly registeringJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly finishedJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly erroredJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly cancelledJobs: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly folder: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly note: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly groupPermissions: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly userPermissions: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly tags: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly taggings: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly comments: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly pluginInstances: string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    readonly owner: string;
}

/**
 * Check if a given object implements the Feed interface.
 */
export function instanceOfFeed(value: object): value is Feed {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('creationDate' in value) || value['creationDate'] === undefined) return false;
    if (!('modificationDate' in value) || value['modificationDate'] === undefined) return false;
    if (!('ownerUsername' in value) || value['ownerUsername'] === undefined) return false;
    if (!('folderPath' in value) || value['folderPath'] === undefined) return false;
    if (!('createdJobs' in value) || value['createdJobs'] === undefined) return false;
    if (!('waitingJobs' in value) || value['waitingJobs'] === undefined) return false;
    if (!('scheduledJobs' in value) || value['scheduledJobs'] === undefined) return false;
    if (!('startedJobs' in value) || value['startedJobs'] === undefined) return false;
    if (!('registeringJobs' in value) || value['registeringJobs'] === undefined) return false;
    if (!('finishedJobs' in value) || value['finishedJobs'] === undefined) return false;
    if (!('erroredJobs' in value) || value['erroredJobs'] === undefined) return false;
    if (!('cancelledJobs' in value) || value['cancelledJobs'] === undefined) return false;
    if (!('folder' in value) || value['folder'] === undefined) return false;
    if (!('note' in value) || value['note'] === undefined) return false;
    if (!('groupPermissions' in value) || value['groupPermissions'] === undefined) return false;
    if (!('userPermissions' in value) || value['userPermissions'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    if (!('taggings' in value) || value['taggings'] === undefined) return false;
    if (!('comments' in value) || value['comments'] === undefined) return false;
    if (!('pluginInstances' in value) || value['pluginInstances'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    return true;
}

export function FeedFromJSON(json: any): Feed {
    return FeedFromJSONTyped(json, false);
}

export function FeedFromJSONTyped(json: any, ignoreDiscriminator: boolean): Feed {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'creationDate': (new Date(json['creation_date'])),
        'modificationDate': (new Date(json['modification_date'])),
        'name': json['name'] == null ? undefined : json['name'],
        '_public': json['public'] == null ? undefined : json['public'],
        'ownerUsername': json['owner_username'],
        'folderPath': json['folder_path'],
        'createdJobs': json['created_jobs'],
        'waitingJobs': json['waiting_jobs'],
        'scheduledJobs': json['scheduled_jobs'],
        'startedJobs': json['started_jobs'],
        'registeringJobs': json['registering_jobs'],
        'finishedJobs': json['finished_jobs'],
        'erroredJobs': json['errored_jobs'],
        'cancelledJobs': json['cancelled_jobs'],
        'folder': json['folder'],
        'note': json['note'],
        'groupPermissions': json['group_permissions'],
        'userPermissions': json['user_permissions'],
        'tags': json['tags'],
        'taggings': json['taggings'],
        'comments': json['comments'],
        'pluginInstances': json['plugin_instances'],
        'owner': json['owner'],
    };
}

export function FeedToJSON(value?: Omit<Feed, 'url'|'id'|'creation_date'|'modification_date'|'owner_username'|'folder_path'|'created_jobs'|'waiting_jobs'|'scheduled_jobs'|'started_jobs'|'registering_jobs'|'finished_jobs'|'errored_jobs'|'cancelled_jobs'|'folder'|'note'|'group_permissions'|'user_permissions'|'tags'|'taggings'|'comments'|'plugin_instances'|'owner'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'public': value['_public'],
    };
}

