/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PermissionEnum } from './PermissionEnum';
import {
    PermissionEnumFromJSON,
    PermissionEnumFromJSONTyped,
    PermissionEnumToJSON,
} from './PermissionEnum';

/**
 * 
 * @export
 * @interface FileBrowserLinkFileUserPermissionRequest
 */
export interface FileBrowserLinkFileUserPermissionRequest {
    /**
     * 
     * @type {PermissionEnum}
     * @memberof FileBrowserLinkFileUserPermissionRequest
     */
    permission?: PermissionEnum;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserLinkFileUserPermissionRequest
     */
    username?: string;
}



/**
 * Check if a given object implements the FileBrowserLinkFileUserPermissionRequest interface.
 */
export function instanceOfFileBrowserLinkFileUserPermissionRequest(value: object): value is FileBrowserLinkFileUserPermissionRequest {
    return true;
}

export function FileBrowserLinkFileUserPermissionRequestFromJSON(json: any): FileBrowserLinkFileUserPermissionRequest {
    return FileBrowserLinkFileUserPermissionRequestFromJSONTyped(json, false);
}

export function FileBrowserLinkFileUserPermissionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileBrowserLinkFileUserPermissionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'permission': json['permission'] == null ? undefined : PermissionEnumFromJSON(json['permission']),
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function FileBrowserLinkFileUserPermissionRequestToJSON(value?: FileBrowserLinkFileUserPermissionRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'permission': PermissionEnumToJSON(value['permission']),
        'username': value['username'],
    };
}

