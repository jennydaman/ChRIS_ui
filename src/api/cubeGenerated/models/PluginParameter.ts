/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Type249Enum } from './Type249Enum';
import {
    Type249EnumFromJSON,
    Type249EnumFromJSONTyped,
    Type249EnumToJSON,
} from './Type249Enum';

/**
 * 
 * @export
 * @interface PluginParameter
 */
export interface PluginParameter {
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof PluginParameter
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    name: string;
    /**
     * 
     * @type {Type249Enum}
     * @memberof PluginParameter
     */
    type?: Type249Enum;
    /**
     * 
     * @type {boolean}
     * @memberof PluginParameter
     */
    optional?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    readonly _default: string;
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    flag: string;
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    shortFlag?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    action?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    help?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PluginParameter
     */
    uiExposed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PluginParameter
     */
    readonly plugin: string;
}



/**
 * Check if a given object implements the PluginParameter interface.
 */
export function instanceOfPluginParameter(value: object): value is PluginParameter {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('_default' in value) || value['_default'] === undefined) return false;
    if (!('flag' in value) || value['flag'] === undefined) return false;
    if (!('plugin' in value) || value['plugin'] === undefined) return false;
    return true;
}

export function PluginParameterFromJSON(json: any): PluginParameter {
    return PluginParameterFromJSONTyped(json, false);
}

export function PluginParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginParameter {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'name': json['name'],
        'type': json['type'] == null ? undefined : Type249EnumFromJSON(json['type']),
        'optional': json['optional'] == null ? undefined : json['optional'],
        '_default': json['default'],
        'flag': json['flag'],
        'shortFlag': json['short_flag'] == null ? undefined : json['short_flag'],
        'action': json['action'] == null ? undefined : json['action'],
        'help': json['help'] == null ? undefined : json['help'],
        'uiExposed': json['ui_exposed'] == null ? undefined : json['ui_exposed'],
        'plugin': json['plugin'],
    };
}

export function PluginParameterToJSON(value?: Omit<PluginParameter, 'url'|'id'|'default'|'plugin'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'type': Type249EnumToJSON(value['type']),
        'optional': value['optional'],
        'flag': value['flag'],
        'short_flag': value['shortFlag'],
        'action': value['action'],
        'help': value['help'],
        'ui_exposed': value['uiExposed'],
    };
}

