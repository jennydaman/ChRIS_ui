/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FileBrowserFile
 */
export interface FileBrowserFile {
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof FileBrowserFile
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof FileBrowserFile
     */
    readonly creationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    fname?: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly fsize: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileBrowserFile
     */
    _public?: boolean;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly ownerUsername: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly fileResource: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly parentFolder: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly groupPermissions: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly userPermissions: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFile
     */
    readonly owner: string;
}

/**
 * Check if a given object implements the FileBrowserFile interface.
 */
export function instanceOfFileBrowserFile(value: object): value is FileBrowserFile {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('creationDate' in value) || value['creationDate'] === undefined) return false;
    if (!('fsize' in value) || value['fsize'] === undefined) return false;
    if (!('ownerUsername' in value) || value['ownerUsername'] === undefined) return false;
    if (!('fileResource' in value) || value['fileResource'] === undefined) return false;
    if (!('parentFolder' in value) || value['parentFolder'] === undefined) return false;
    if (!('groupPermissions' in value) || value['groupPermissions'] === undefined) return false;
    if (!('userPermissions' in value) || value['userPermissions'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    return true;
}

export function FileBrowserFileFromJSON(json: any): FileBrowserFile {
    return FileBrowserFileFromJSONTyped(json, false);
}

export function FileBrowserFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileBrowserFile {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'creationDate': (new Date(json['creation_date'])),
        'fname': json['fname'] == null ? undefined : json['fname'],
        'fsize': json['fsize'],
        '_public': json['public'] == null ? undefined : json['public'],
        'ownerUsername': json['owner_username'],
        'fileResource': json['file_resource'],
        'parentFolder': json['parent_folder'],
        'groupPermissions': json['group_permissions'],
        'userPermissions': json['user_permissions'],
        'owner': json['owner'],
    };
}

export function FileBrowserFileToJSON(value?: Omit<FileBrowserFile, 'url'|'id'|'creation_date'|'fsize'|'owner_username'|'file_resource'|'parent_folder'|'group_permissions'|'user_permissions'|'owner'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fname': value['fname'],
        'public': value['_public'],
    };
}

