/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GroupUser
 */
export interface GroupUser {
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof GroupUser
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof GroupUser
     */
    readonly groupId: number;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    readonly groupName: string;
    /**
     * 
     * @type {number}
     * @memberof GroupUser
     */
    readonly userId: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof GroupUser
     */
    readonly userUsername: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    readonly userEmail: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    readonly group: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    readonly user: string;
}

/**
 * Check if a given object implements the GroupUser interface.
 */
export function instanceOfGroupUser(value: object): value is GroupUser {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('groupId' in value) || value['groupId'] === undefined) return false;
    if (!('groupName' in value) || value['groupName'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('userUsername' in value) || value['userUsername'] === undefined) return false;
    if (!('userEmail' in value) || value['userEmail'] === undefined) return false;
    if (!('group' in value) || value['group'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function GroupUserFromJSON(json: any): GroupUser {
    return GroupUserFromJSONTyped(json, false);
}

export function GroupUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupUser {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'groupId': json['group_id'],
        'groupName': json['group_name'],
        'userId': json['user_id'],
        'userUsername': json['user_username'],
        'userEmail': json['user_email'],
        'group': json['group'],
        'user': json['user'],
    };
}

export function GroupUserToJSON(value?: Omit<GroupUser, 'url'|'id'|'group_id'|'group_name'|'user_id'|'user_username'|'user_email'|'group'|'user'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
    };
}

