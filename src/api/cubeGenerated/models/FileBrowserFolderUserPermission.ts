/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PermissionEnum } from './PermissionEnum';
import {
    PermissionEnumFromJSON,
    PermissionEnumFromJSONTyped,
    PermissionEnumToJSON,
} from './PermissionEnum';

/**
 * 
 * @export
 * @interface FileBrowserFolderUserPermission
 */
export interface FileBrowserFolderUserPermission {
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly url: string;
    /**
     * 
     * @type {number}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly id: number;
    /**
     * 
     * @type {PermissionEnum}
     * @memberof FileBrowserFolderUserPermission
     */
    permission?: PermissionEnum;
    /**
     * 
     * @type {number}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly folderId: number;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly folderPath: string;
    /**
     * 
     * @type {number}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly userId: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly userUsername: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly folder: string;
    /**
     * 
     * @type {string}
     * @memberof FileBrowserFolderUserPermission
     */
    readonly user: string;
}



/**
 * Check if a given object implements the FileBrowserFolderUserPermission interface.
 */
export function instanceOfFileBrowserFolderUserPermission(value: object): value is FileBrowserFolderUserPermission {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('folderId' in value) || value['folderId'] === undefined) return false;
    if (!('folderPath' in value) || value['folderPath'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('userUsername' in value) || value['userUsername'] === undefined) return false;
    if (!('folder' in value) || value['folder'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function FileBrowserFolderUserPermissionFromJSON(json: any): FileBrowserFolderUserPermission {
    return FileBrowserFolderUserPermissionFromJSONTyped(json, false);
}

export function FileBrowserFolderUserPermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileBrowserFolderUserPermission {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'id': json['id'],
        'permission': json['permission'] == null ? undefined : PermissionEnumFromJSON(json['permission']),
        'folderId': json['folder_id'],
        'folderPath': json['folder_path'],
        'userId': json['user_id'],
        'userUsername': json['user_username'],
        'folder': json['folder'],
        'user': json['user'],
    };
}

export function FileBrowserFolderUserPermissionToJSON(value?: Omit<FileBrowserFolderUserPermission, 'url'|'id'|'folder_id'|'folder_path'|'user_id'|'user_username'|'folder'|'user'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'permission': PermissionEnumToJSON(value['permission']),
    };
}

