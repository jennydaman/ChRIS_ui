/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComputeResource,
  ComputeResourceRequest,
  PaginatedComputeResourceList,
  PaginatedPluginAdminList,
  PluginAdmin,
  PluginAdminRequest,
} from '../models/index';
import {
    ComputeResourceFromJSON,
    ComputeResourceToJSON,
    ComputeResourceRequestFromJSON,
    ComputeResourceRequestToJSON,
    PaginatedComputeResourceListFromJSON,
    PaginatedComputeResourceListToJSON,
    PaginatedPluginAdminListFromJSON,
    PaginatedPluginAdminListToJSON,
    PluginAdminFromJSON,
    PluginAdminToJSON,
    PluginAdminRequestFromJSON,
    PluginAdminRequestToJSON,
} from '../models/index';

export interface ChrisAdminApiV1ComputeresourcesCreateRequest {
    computeResourceRequest: ComputeResourceRequest;
    format?: ChrisAdminApiV1ComputeresourcesCreateFormatEnum;
}

export interface ChrisAdminApiV1ComputeresourcesDestroyRequest {
    id: number;
    format?: ChrisAdminApiV1ComputeresourcesDestroyFormatEnum;
}

export interface ChrisAdminApiV1ComputeresourcesListRequest {
    format?: ChrisAdminApiV1ComputeresourcesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface ChrisAdminApiV1ComputeresourcesRetrieveRequest {
    id: number;
    format?: ChrisAdminApiV1ComputeresourcesRetrieveFormatEnum;
}

export interface ChrisAdminApiV1CreateRequest {
    pluginAdminRequest: PluginAdminRequest;
    format?: ChrisAdminApiV1CreateFormatEnum;
}

export interface ChrisAdminApiV1DestroyRequest {
    id: number;
    format?: ChrisAdminApiV1DestroyFormatEnum;
}

export interface ChrisAdminApiV1ListRequest {
    format?: ChrisAdminApiV1ListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface ChrisAdminApiV1RetrieveRequest {
    id: number;
    format?: ChrisAdminApiV1RetrieveFormatEnum;
}

export interface ChrisAdminApiV1UpdateRequest {
    id: number;
    pluginAdminRequest: PluginAdminRequest;
    format?: ChrisAdminApiV1UpdateFormatEnum;
}

/**
 * ChrisAdminApi - interface
 * 
 * @export
 * @interface ChrisAdminApiInterface
 */
export interface ChrisAdminApiInterface {
    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     * @param {ComputeResourceRequest} computeResourceRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1ComputeresourcesCreateRaw(requestParameters: ChrisAdminApiV1ComputeresourcesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeResource>>;

    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     */
    chrisAdminApiV1ComputeresourcesCreate(requestParameters: ChrisAdminApiV1ComputeresourcesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeResource>;

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1ComputeresourcesDestroyRaw(requestParameters: ChrisAdminApiV1ComputeresourcesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     */
    chrisAdminApiV1ComputeresourcesDestroy(requestParameters: ChrisAdminApiV1ComputeresourcesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1ComputeresourcesListRaw(requestParameters: ChrisAdminApiV1ComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>>;

    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     */
    chrisAdminApiV1ComputeresourcesList(requestParameters: ChrisAdminApiV1ComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList>;

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1ComputeresourcesRetrieveRaw(requestParameters: ChrisAdminApiV1ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeResource>>;

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     */
    chrisAdminApiV1ComputeresourcesRetrieve(requestParameters: ChrisAdminApiV1ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeResource>;

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     * @param {PluginAdminRequest} pluginAdminRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1CreateRaw(requestParameters: ChrisAdminApiV1CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginAdmin>>;

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     */
    chrisAdminApiV1Create(requestParameters: ChrisAdminApiV1CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginAdmin>;

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1DestroyRaw(requestParameters: ChrisAdminApiV1DestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    chrisAdminApiV1Destroy(requestParameters: ChrisAdminApiV1DestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1ListRaw(requestParameters: ChrisAdminApiV1ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginAdminList>>;

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     */
    chrisAdminApiV1List(requestParameters: ChrisAdminApiV1ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginAdminList>;

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1RetrieveRaw(requestParameters: ChrisAdminApiV1RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginAdmin>>;

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    chrisAdminApiV1Retrieve(requestParameters: ChrisAdminApiV1RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginAdmin>;

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     * @param {number} id 
     * @param {PluginAdminRequest} pluginAdminRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisAdminApiInterface
     */
    chrisAdminApiV1UpdateRaw(requestParameters: ChrisAdminApiV1UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginAdmin>>;

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    chrisAdminApiV1Update(requestParameters: ChrisAdminApiV1UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginAdmin>;

}

/**
 * 
 */
export class ChrisAdminApi extends runtime.BaseAPI implements ChrisAdminApiInterface {

    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1ComputeresourcesCreateRaw(requestParameters: ChrisAdminApiV1ComputeresourcesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeResource>> {
        if (requestParameters['computeResourceRequest'] == null) {
            throw new runtime.RequiredError(
                'computeResourceRequest',
                'Required parameter "computeResourceRequest" was null or undefined when calling chrisAdminApiV1ComputeresourcesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/computeresources/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComputeResourceRequestToJSON(requestParameters['computeResourceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputeResourceFromJSON(jsonValue));
    }

    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1ComputeresourcesCreate(requestParameters: ChrisAdminApiV1ComputeresourcesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeResource> {
        const response = await this.chrisAdminApiV1ComputeresourcesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     */
    async chrisAdminApiV1ComputeresourcesDestroyRaw(requestParameters: ChrisAdminApiV1ComputeresourcesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chrisAdminApiV1ComputeresourcesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/computeresources/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     */
    async chrisAdminApiV1ComputeresourcesDestroy(requestParameters: ChrisAdminApiV1ComputeresourcesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chrisAdminApiV1ComputeresourcesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1ComputeresourcesListRaw(requestParameters: ChrisAdminApiV1ComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/computeresources/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedComputeResourceListFromJSON(jsonValue));
    }

    /**
     * A JSON view for the collection of compute resources that can be used by ChRIS admins to add a new compute resource through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1ComputeresourcesList(requestParameters: ChrisAdminApiV1ComputeresourcesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList> {
        const response = await this.chrisAdminApiV1ComputeresourcesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     */
    async chrisAdminApiV1ComputeresourcesRetrieveRaw(requestParameters: ChrisAdminApiV1ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeResource>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chrisAdminApiV1ComputeresourcesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/computeresources/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputeResourceFromJSON(jsonValue));
    }

    /**
     * A JSON view for a compute resource that can be used by ChRIS admins to delete the compute resource through a REST API.
     */
    async chrisAdminApiV1ComputeresourcesRetrieve(requestParameters: ChrisAdminApiV1ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeResource> {
        const response = await this.chrisAdminApiV1ComputeresourcesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1CreateRaw(requestParameters: ChrisAdminApiV1CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginAdmin>> {
        if (requestParameters['pluginAdminRequest'] == null) {
            throw new runtime.RequiredError(
                'pluginAdminRequest',
                'Required parameter "pluginAdminRequest" was null or undefined when calling chrisAdminApiV1Create().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginAdminRequestToJSON(requestParameters['pluginAdminRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginAdminFromJSON(jsonValue));
    }

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1Create(requestParameters: ChrisAdminApiV1CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginAdmin> {
        const response = await this.chrisAdminApiV1CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    async chrisAdminApiV1DestroyRaw(requestParameters: ChrisAdminApiV1DestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chrisAdminApiV1Destroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    async chrisAdminApiV1Destroy(requestParameters: ChrisAdminApiV1DestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chrisAdminApiV1DestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1ListRaw(requestParameters: ChrisAdminApiV1ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginAdminList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginAdminListFromJSON(jsonValue));
    }

    /**
     * A JSON view for the collection of plugins that can be used by ChRIS admins to register plugins through a REST API (alternative to the HTML-based admin site).
     */
    async chrisAdminApiV1List(requestParameters: ChrisAdminApiV1ListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginAdminList> {
        const response = await this.chrisAdminApiV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    async chrisAdminApiV1RetrieveRaw(requestParameters: ChrisAdminApiV1RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginAdmin>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chrisAdminApiV1Retrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginAdminFromJSON(jsonValue));
    }

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    async chrisAdminApiV1Retrieve(requestParameters: ChrisAdminApiV1RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginAdmin> {
        const response = await this.chrisAdminApiV1RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    async chrisAdminApiV1UpdateRaw(requestParameters: ChrisAdminApiV1UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginAdmin>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chrisAdminApiV1Update().'
            );
        }

        if (requestParameters['pluginAdminRequest'] == null) {
            throw new runtime.RequiredError(
                'pluginAdminRequest',
                'Required parameter "pluginAdminRequest" was null or undefined when calling chrisAdminApiV1Update().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/chris-admin/api/v1/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PluginAdminRequestToJSON(requestParameters['pluginAdminRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginAdminFromJSON(jsonValue));
    }

    /**
     * A JSON view for a plugin that can be used by ChRIS admins to delete the plugin through a REST API.
     */
    async chrisAdminApiV1Update(requestParameters: ChrisAdminApiV1UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginAdmin> {
        const response = await this.chrisAdminApiV1UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ChrisAdminApiV1ComputeresourcesCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1ComputeresourcesCreateFormatEnum = typeof ChrisAdminApiV1ComputeresourcesCreateFormatEnum[keyof typeof ChrisAdminApiV1ComputeresourcesCreateFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1ComputeresourcesDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1ComputeresourcesDestroyFormatEnum = typeof ChrisAdminApiV1ComputeresourcesDestroyFormatEnum[keyof typeof ChrisAdminApiV1ComputeresourcesDestroyFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1ComputeresourcesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1ComputeresourcesListFormatEnum = typeof ChrisAdminApiV1ComputeresourcesListFormatEnum[keyof typeof ChrisAdminApiV1ComputeresourcesListFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1ComputeresourcesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1ComputeresourcesRetrieveFormatEnum = typeof ChrisAdminApiV1ComputeresourcesRetrieveFormatEnum[keyof typeof ChrisAdminApiV1ComputeresourcesRetrieveFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1CreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1CreateFormatEnum = typeof ChrisAdminApiV1CreateFormatEnum[keyof typeof ChrisAdminApiV1CreateFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1DestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1DestroyFormatEnum = typeof ChrisAdminApiV1DestroyFormatEnum[keyof typeof ChrisAdminApiV1DestroyFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1ListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1ListFormatEnum = typeof ChrisAdminApiV1ListFormatEnum[keyof typeof ChrisAdminApiV1ListFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1RetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1RetrieveFormatEnum = typeof ChrisAdminApiV1RetrieveFormatEnum[keyof typeof ChrisAdminApiV1RetrieveFormatEnum];
/**
 * @export
 */
export const ChrisAdminApiV1UpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisAdminApiV1UpdateFormatEnum = typeof ChrisAdminApiV1UpdateFormatEnum[keyof typeof ChrisAdminApiV1UpdateFormatEnum];
