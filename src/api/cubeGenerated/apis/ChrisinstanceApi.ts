/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChrisInstance,
} from '../models/index';
import {
    ChrisInstanceFromJSON,
    ChrisInstanceToJSON,
} from '../models/index';

export interface ChrisinstanceRetrieveRequest {
    id: number;
    format?: ChrisinstanceRetrieveFormatEnum;
}

/**
 * ChrisinstanceApi - interface
 * 
 * @export
 * @interface ChrisinstanceApiInterface
 */
export interface ChrisinstanceApiInterface {
    /**
     * A compute resource view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChrisinstanceApiInterface
     */
    chrisinstanceRetrieveRaw(requestParameters: ChrisinstanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChrisInstance>>;

    /**
     * A compute resource view.
     */
    chrisinstanceRetrieve(requestParameters: ChrisinstanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChrisInstance>;

}

/**
 * 
 */
export class ChrisinstanceApi extends runtime.BaseAPI implements ChrisinstanceApiInterface {

    /**
     * A compute resource view.
     */
    async chrisinstanceRetrieveRaw(requestParameters: ChrisinstanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChrisInstance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chrisinstanceRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/chrisinstance/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChrisInstanceFromJSON(jsonValue));
    }

    /**
     * A compute resource view.
     */
    async chrisinstanceRetrieve(requestParameters: ChrisinstanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChrisInstance> {
        const response = await this.chrisinstanceRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ChrisinstanceRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ChrisinstanceRetrieveFormatEnum = typeof ChrisinstanceRetrieveFormatEnum[keyof typeof ChrisinstanceRetrieveFormatEnum];
