/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoolParameter,
  FloatParameter,
  IntParameter,
  PaginatedComputeResourceList,
  PaginatedGenericParameterList,
  PaginatedPluginInstanceList,
  PaginatedPluginInstanceSplitList,
  PaginatedPluginList,
  PaginatedPluginMetaList,
  PaginatedPluginParameterList,
  Plugin,
  PluginInstance,
  PluginInstanceRequest,
  PluginInstanceSplit,
  PluginInstanceSplitRequest,
  PluginMeta,
  PluginParameter,
  StrParameter,
} from '../models/index';
import {
    BoolParameterFromJSON,
    BoolParameterToJSON,
    FloatParameterFromJSON,
    FloatParameterToJSON,
    IntParameterFromJSON,
    IntParameterToJSON,
    PaginatedComputeResourceListFromJSON,
    PaginatedComputeResourceListToJSON,
    PaginatedGenericParameterListFromJSON,
    PaginatedGenericParameterListToJSON,
    PaginatedPluginInstanceListFromJSON,
    PaginatedPluginInstanceListToJSON,
    PaginatedPluginInstanceSplitListFromJSON,
    PaginatedPluginInstanceSplitListToJSON,
    PaginatedPluginListFromJSON,
    PaginatedPluginListToJSON,
    PaginatedPluginMetaListFromJSON,
    PaginatedPluginMetaListToJSON,
    PaginatedPluginParameterListFromJSON,
    PaginatedPluginParameterListToJSON,
    PluginFromJSON,
    PluginToJSON,
    PluginInstanceFromJSON,
    PluginInstanceToJSON,
    PluginInstanceRequestFromJSON,
    PluginInstanceRequestToJSON,
    PluginInstanceSplitFromJSON,
    PluginInstanceSplitToJSON,
    PluginInstanceSplitRequestFromJSON,
    PluginInstanceSplitRequestToJSON,
    PluginMetaFromJSON,
    PluginMetaToJSON,
    PluginParameterFromJSON,
    PluginParameterToJSON,
    StrParameterFromJSON,
    StrParameterToJSON,
} from '../models/index';

export interface PluginsBooleanParameterRetrieveRequest {
    id: number;
    format?: PluginsBooleanParameterRetrieveFormatEnum;
}

export interface PluginsComputeresourcesListRequest {
    id: number;
    format?: PluginsComputeresourcesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsFloatParameterRetrieveRequest {
    id: number;
    format?: PluginsFloatParameterRetrieveFormatEnum;
}

export interface PluginsInstancesCreateRequest {
    id: number;
    format?: PluginsInstancesCreateFormatEnum;
    pluginInstanceRequest?: PluginInstanceRequest;
}

export interface PluginsInstancesDescendantsListRequest {
    id: number;
    format?: PluginsInstancesDescendantsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsInstancesDestroyRequest {
    id: number;
    format?: PluginsInstancesDestroyFormatEnum;
}

export interface PluginsInstancesListRequest {
    format?: PluginsInstancesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsInstancesList2Request {
    id: number;
    format?: PluginsInstancesList2FormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsInstancesParametersListRequest {
    id: number;
    format?: PluginsInstancesParametersListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsInstancesRetrieveRequest {
    id: number;
    format?: PluginsInstancesRetrieveFormatEnum;
}

export interface PluginsInstancesSearchListRequest {
    feedId?: string;
    format?: PluginsInstancesSearchListFormatEnum;
    id?: number;
    limit?: number;
    maxEndDate?: Date;
    maxStartDate?: Date;
    minEndDate?: Date;
    minStartDate?: Date;
    offset?: number;
    ownerUsername?: string;
    pluginId?: string;
    pluginName?: string;
    pluginNameExact?: string;
    pluginVersion?: string;
    previousId?: string;
    rootId?: string;
    status?: PluginsInstancesSearchListStatusEnum;
    title?: string;
    workflowId?: string;
}

export interface PluginsInstancesSplitsCreateRequest {
    id: number;
    format?: PluginsInstancesSplitsCreateFormatEnum;
    pluginInstanceSplitRequest?: PluginInstanceSplitRequest;
}

export interface PluginsInstancesSplitsListRequest {
    id: number;
    format?: PluginsInstancesSplitsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsInstancesSplitsRetrieveRequest {
    id: number;
    format?: PluginsInstancesSplitsRetrieveFormatEnum;
}

export interface PluginsInstancesUpdateRequest {
    id: number;
    format?: PluginsInstancesUpdateFormatEnum;
    pluginInstanceRequest?: PluginInstanceRequest;
}

export interface PluginsIntegerParameterRetrieveRequest {
    id: number;
    format?: PluginsIntegerParameterRetrieveFormatEnum;
}

export interface PluginsListRequest {
    format?: PluginsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsMetasListRequest {
    format?: PluginsMetasListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsMetasPluginsListRequest {
    id: number;
    format?: PluginsMetasPluginsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsMetasRetrieveRequest {
    id: number;
    format?: PluginsMetasRetrieveFormatEnum;
}

export interface PluginsMetasSearchListRequest {
    authors?: string;
    category?: string;
    format?: PluginsMetasSearchListFormatEnum;
    id?: number;
    limit?: number;
    maxCreationDate?: Date;
    minCreationDate?: Date;
    name?: string;
    nameAuthorsCategory?: string;
    nameExact?: string;
    nameTitleCategory?: string;
    offset?: number;
    title?: string;
    type?: string;
}

export interface PluginsParametersListRequest {
    id: number;
    format?: PluginsParametersListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PluginsParametersRetrieveRequest {
    id: number;
    format?: PluginsParametersRetrieveFormatEnum;
}

export interface PluginsPathParameterRetrieveRequest {
    id: number;
    format?: PluginsPathParameterRetrieveFormatEnum;
}

export interface PluginsRetrieveRequest {
    id: number;
    format?: PluginsRetrieveFormatEnum;
}

export interface PluginsSearchListRequest {
    category?: string;
    computeResourceId?: string;
    description?: string;
    dockImage?: string;
    format?: PluginsSearchListFormatEnum;
    id?: number;
    limit?: number;
    maxCreationDate?: Date;
    minCreationDate?: Date;
    name?: string;
    nameExact?: string;
    nameTitleCategory?: string;
    offset?: number;
    title?: string;
    type?: string;
    version?: string;
}

export interface PluginsStringParameterRetrieveRequest {
    id: number;
    format?: PluginsStringParameterRetrieveFormatEnum;
}

export interface PluginsUnextpathParameterRetrieveRequest {
    id: number;
    format?: PluginsUnextpathParameterRetrieveFormatEnum;
}

/**
 * PluginsApi - interface
 * 
 * @export
 * @interface PluginsApiInterface
 */
export interface PluginsApiInterface {
    /**
     * A boolean parameter view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsBooleanParameterRetrieveRaw(requestParameters: PluginsBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoolParameter>>;

    /**
     * A boolean parameter view.
     */
    pluginsBooleanParameterRetrieve(requestParameters: PluginsBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoolParameter>;

    /**
     * A view for a plugin-specific collection of compute resources.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsComputeresourcesListRaw(requestParameters: PluginsComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>>;

    /**
     * A view for a plugin-specific collection of compute resources.
     */
    pluginsComputeresourcesList(requestParameters: PluginsComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList>;

    /**
     * A float parameter view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsFloatParameterRetrieveRaw(requestParameters: PluginsFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FloatParameter>>;

    /**
     * A float parameter view.
     */
    pluginsFloatParameterRetrieve(requestParameters: PluginsFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FloatParameter>;

    /**
     * A view for the collection of plugin instances.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {PluginInstanceRequest} [pluginInstanceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesCreateRaw(requestParameters: PluginsInstancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstance>>;

    /**
     * A view for the collection of plugin instances.
     */
    pluginsInstancesCreate(requestParameters: PluginsInstancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstance>;

    /**
     * A view for the collection of plugin instances that are a descendant of this plugin instance.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesDescendantsListRaw(requestParameters: PluginsInstancesDescendantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>>;

    /**
     * A view for the collection of plugin instances that are a descendant of this plugin instance.
     */
    pluginsInstancesDescendantsList(requestParameters: PluginsInstancesDescendantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList>;

    /**
     * A plugin instance view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesDestroyRaw(requestParameters: PluginsInstancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A plugin instance view.
     */
    pluginsInstancesDestroy(requestParameters: PluginsInstancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the collection of all plugin instances.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesListRaw(requestParameters: PluginsInstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>>;

    /**
     * A view for the collection of all plugin instances.
     */
    pluginsInstancesList(requestParameters: PluginsInstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList>;

    /**
     * A view for the collection of plugin instances.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesList2Raw(requestParameters: PluginsInstancesList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>>;

    /**
     * A view for the collection of plugin instances.
     */
    pluginsInstancesList2(requestParameters: PluginsInstancesList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList>;

    /**
     * A view for the collection of parameters that the plugin instance was run with.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesParametersListRaw(requestParameters: PluginsInstancesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGenericParameterList>>;

    /**
     * A view for the collection of parameters that the plugin instance was run with.
     */
    pluginsInstancesParametersList(requestParameters: PluginsInstancesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGenericParameterList>;

    /**
     * A plugin instance view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesRetrieveRaw(requestParameters: PluginsInstancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstance>>;

    /**
     * A plugin instance view.
     */
    pluginsInstancesRetrieve(requestParameters: PluginsInstancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstance>;

    /**
     * A view for the collection of plugin instances resulting from a query search.
     * @param {string} [feedId] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {Date} [maxEndDate] 
     * @param {Date} [maxStartDate] 
     * @param {Date} [minEndDate] 
     * @param {Date} [minStartDate] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ownerUsername] 
     * @param {string} [pluginId] 
     * @param {string} [pluginName] 
     * @param {string} [pluginNameExact] 
     * @param {string} [pluginVersion] 
     * @param {string} [previousId] 
     * @param {string} [rootId] 
     * @param {'cancelled' | 'created' | 'finishedSuccessfully' | 'finishedWithError' | 'registeringFiles' | 'scheduled' | 'started' | 'waiting'} [status] * &#x60;created&#x60; - Default initial * &#x60;waiting&#x60; - Waiting to be scheduled * &#x60;scheduled&#x60; - Scheduled on worker * &#x60;started&#x60; - Started on compute env * &#x60;registeringFiles&#x60; - Registering output files * &#x60;finishedSuccessfully&#x60; - Finished successfully * &#x60;finishedWithError&#x60; - Finished with error * &#x60;cancelled&#x60; - Cancelled
     * @param {string} [title] 
     * @param {string} [workflowId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesSearchListRaw(requestParameters: PluginsInstancesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>>;

    /**
     * A view for the collection of plugin instances resulting from a query search.
     */
    pluginsInstancesSearchList(requestParameters: PluginsInstancesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList>;

    /**
     * A view for the collection of splits for a plugin instance.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {PluginInstanceSplitRequest} [pluginInstanceSplitRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesSplitsCreateRaw(requestParameters: PluginsInstancesSplitsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstanceSplit>>;

    /**
     * A view for the collection of splits for a plugin instance.
     */
    pluginsInstancesSplitsCreate(requestParameters: PluginsInstancesSplitsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstanceSplit>;

    /**
     * A view for the collection of splits for a plugin instance.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesSplitsListRaw(requestParameters: PluginsInstancesSplitsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceSplitList>>;

    /**
     * A view for the collection of splits for a plugin instance.
     */
    pluginsInstancesSplitsList(requestParameters: PluginsInstancesSplitsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceSplitList>;

    /**
     * A view for a plugin instance split.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesSplitsRetrieveRaw(requestParameters: PluginsInstancesSplitsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstanceSplit>>;

    /**
     * A view for a plugin instance split.
     */
    pluginsInstancesSplitsRetrieve(requestParameters: PluginsInstancesSplitsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstanceSplit>;

    /**
     * A plugin instance view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {PluginInstanceRequest} [pluginInstanceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsInstancesUpdateRaw(requestParameters: PluginsInstancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstance>>;

    /**
     * A plugin instance view.
     */
    pluginsInstancesUpdate(requestParameters: PluginsInstancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstance>;

    /**
     * An integer parameter view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsIntegerParameterRetrieveRaw(requestParameters: PluginsIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntParameter>>;

    /**
     * An integer parameter view.
     */
    pluginsIntegerParameterRetrieve(requestParameters: PluginsIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntParameter>;

    /**
     * A view for the collection of plugins.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsListRaw(requestParameters: PluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>>;

    /**
     * A view for the collection of plugins.
     */
    pluginsList(requestParameters: PluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList>;

    /**
     * A view for the collection of plugin metas.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsMetasListRaw(requestParameters: PluginsMetasListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginMetaList>>;

    /**
     * A view for the collection of plugin metas.
     */
    pluginsMetasList(requestParameters: PluginsMetasListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginMetaList>;

    /**
     * A view for the collection of meta-specific plugins.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsMetasPluginsListRaw(requestParameters: PluginsMetasPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>>;

    /**
     * A view for the collection of meta-specific plugins.
     */
    pluginsMetasPluginsList(requestParameters: PluginsMetasPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList>;

    /**
     * A plugin meta view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsMetasRetrieveRaw(requestParameters: PluginsMetasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginMeta>>;

    /**
     * A plugin meta view.
     */
    pluginsMetasRetrieve(requestParameters: PluginsMetasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginMeta>;

    /**
     * A view for the collection of plugin metas resulting from a query search.
     * @param {string} [authors] 
     * @param {string} [category] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {Date} [maxCreationDate] 
     * @param {Date} [minCreationDate] 
     * @param {string} [name] 
     * @param {string} [nameAuthorsCategory] 
     * @param {string} [nameExact] 
     * @param {string} [nameTitleCategory] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [title] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsMetasSearchListRaw(requestParameters: PluginsMetasSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginMetaList>>;

    /**
     * A view for the collection of plugin metas resulting from a query search.
     */
    pluginsMetasSearchList(requestParameters: PluginsMetasSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginMetaList>;

    /**
     * A view for the collection of plugin parameters.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsParametersListRaw(requestParameters: PluginsParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginParameterList>>;

    /**
     * A view for the collection of plugin parameters.
     */
    pluginsParametersList(requestParameters: PluginsParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginParameterList>;

    /**
     * A plugin parameter view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsParametersRetrieveRaw(requestParameters: PluginsParametersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginParameter>>;

    /**
     * A plugin parameter view.
     */
    pluginsParametersRetrieve(requestParameters: PluginsParametersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginParameter>;

    /**
     * A path parameter view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsPathParameterRetrieveRaw(requestParameters: PluginsPathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A path parameter view.
     */
    pluginsPathParameterRetrieve(requestParameters: PluginsPathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A plugin view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsRetrieveRaw(requestParameters: PluginsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Plugin>>;

    /**
     * A plugin view.
     */
    pluginsRetrieve(requestParameters: PluginsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Plugin>;

    /**
     * A view for the collection of plugins resulting from a query search.
     * @param {string} [category] 
     * @param {string} [computeResourceId] 
     * @param {string} [description] 
     * @param {string} [dockImage] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {Date} [maxCreationDate] 
     * @param {Date} [minCreationDate] 
     * @param {string} [name] 
     * @param {string} [nameExact] 
     * @param {string} [nameTitleCategory] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [title] 
     * @param {string} [type] 
     * @param {string} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsSearchListRaw(requestParameters: PluginsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>>;

    /**
     * A view for the collection of plugins resulting from a query search.
     */
    pluginsSearchList(requestParameters: PluginsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList>;

    /**
     * A string parameter view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsStringParameterRetrieveRaw(requestParameters: PluginsStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StrParameter>>;

    /**
     * A string parameter view.
     */
    pluginsStringParameterRetrieve(requestParameters: PluginsStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StrParameter>;

    /**
     * A unextpath parameter view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    pluginsUnextpathParameterRetrieveRaw(requestParameters: PluginsUnextpathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A unextpath parameter view.
     */
    pluginsUnextpathParameterRetrieve(requestParameters: PluginsUnextpathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class PluginsApi extends runtime.BaseAPI implements PluginsApiInterface {

    /**
     * A boolean parameter view.
     */
    async pluginsBooleanParameterRetrieveRaw(requestParameters: PluginsBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoolParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsBooleanParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/boolean-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoolParameterFromJSON(jsonValue));
    }

    /**
     * A boolean parameter view.
     */
    async pluginsBooleanParameterRetrieve(requestParameters: PluginsBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoolParameter> {
        const response = await this.pluginsBooleanParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a plugin-specific collection of compute resources.
     */
    async pluginsComputeresourcesListRaw(requestParameters: PluginsComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsComputeresourcesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/{id}/computeresources/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedComputeResourceListFromJSON(jsonValue));
    }

    /**
     * A view for a plugin-specific collection of compute resources.
     */
    async pluginsComputeresourcesList(requestParameters: PluginsComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList> {
        const response = await this.pluginsComputeresourcesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A float parameter view.
     */
    async pluginsFloatParameterRetrieveRaw(requestParameters: PluginsFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FloatParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsFloatParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/float-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FloatParameterFromJSON(jsonValue));
    }

    /**
     * A float parameter view.
     */
    async pluginsFloatParameterRetrieve(requestParameters: PluginsFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FloatParameter> {
        const response = await this.pluginsFloatParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin instances.
     */
    async pluginsInstancesCreateRaw(requestParameters: PluginsInstancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/{id}/instances/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginInstanceRequestToJSON(requestParameters['pluginInstanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginInstanceFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin instances.
     */
    async pluginsInstancesCreate(requestParameters: PluginsInstancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstance> {
        const response = await this.pluginsInstancesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin instances that are a descendant of this plugin instance.
     */
    async pluginsInstancesDescendantsListRaw(requestParameters: PluginsInstancesDescendantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesDescendantsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/{id}/descendants/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginInstanceListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin instances that are a descendant of this plugin instance.
     */
    async pluginsInstancesDescendantsList(requestParameters: PluginsInstancesDescendantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList> {
        const response = await this.pluginsInstancesDescendantsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A plugin instance view.
     */
    async pluginsInstancesDestroyRaw(requestParameters: PluginsInstancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A plugin instance view.
     */
    async pluginsInstancesDestroy(requestParameters: PluginsInstancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsInstancesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for the collection of all plugin instances.
     */
    async pluginsInstancesListRaw(requestParameters: PluginsInstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginInstanceListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of all plugin instances.
     */
    async pluginsInstancesList(requestParameters: PluginsInstancesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList> {
        const response = await this.pluginsInstancesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin instances.
     */
    async pluginsInstancesList2Raw(requestParameters: PluginsInstancesList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesList2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/{id}/instances/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginInstanceListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin instances.
     */
    async pluginsInstancesList2(requestParameters: PluginsInstancesList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList> {
        const response = await this.pluginsInstancesList2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of parameters that the plugin instance was run with.
     */
    async pluginsInstancesParametersListRaw(requestParameters: PluginsInstancesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGenericParameterList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesParametersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/{id}/parameters/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGenericParameterListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of parameters that the plugin instance was run with.
     */
    async pluginsInstancesParametersList(requestParameters: PluginsInstancesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGenericParameterList> {
        const response = await this.pluginsInstancesParametersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A plugin instance view.
     */
    async pluginsInstancesRetrieveRaw(requestParameters: PluginsInstancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginInstanceFromJSON(jsonValue));
    }

    /**
     * A plugin instance view.
     */
    async pluginsInstancesRetrieve(requestParameters: PluginsInstancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstance> {
        const response = await this.pluginsInstancesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin instances resulting from a query search.
     */
    async pluginsInstancesSearchListRaw(requestParameters: PluginsInstancesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>> {
        const queryParameters: any = {};

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['maxEndDate'] != null) {
            queryParameters['max_end_date'] = (requestParameters['maxEndDate'] as any).toISOString();
        }

        if (requestParameters['maxStartDate'] != null) {
            queryParameters['max_start_date'] = (requestParameters['maxStartDate'] as any).toISOString();
        }

        if (requestParameters['minEndDate'] != null) {
            queryParameters['min_end_date'] = (requestParameters['minEndDate'] as any).toISOString();
        }

        if (requestParameters['minStartDate'] != null) {
            queryParameters['min_start_date'] = (requestParameters['minStartDate'] as any).toISOString();
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['ownerUsername'] != null) {
            queryParameters['owner_username'] = requestParameters['ownerUsername'];
        }

        if (requestParameters['pluginId'] != null) {
            queryParameters['plugin_id'] = requestParameters['pluginId'];
        }

        if (requestParameters['pluginName'] != null) {
            queryParameters['plugin_name'] = requestParameters['pluginName'];
        }

        if (requestParameters['pluginNameExact'] != null) {
            queryParameters['plugin_name_exact'] = requestParameters['pluginNameExact'];
        }

        if (requestParameters['pluginVersion'] != null) {
            queryParameters['plugin_version'] = requestParameters['pluginVersion'];
        }

        if (requestParameters['previousId'] != null) {
            queryParameters['previous_id'] = requestParameters['previousId'];
        }

        if (requestParameters['rootId'] != null) {
            queryParameters['root_id'] = requestParameters['rootId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['workflowId'] != null) {
            queryParameters['workflow_id'] = requestParameters['workflowId'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginInstanceListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin instances resulting from a query search.
     */
    async pluginsInstancesSearchList(requestParameters: PluginsInstancesSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList> {
        const response = await this.pluginsInstancesSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of splits for a plugin instance.
     */
    async pluginsInstancesSplitsCreateRaw(requestParameters: PluginsInstancesSplitsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstanceSplit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesSplitsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/{id}/splits/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginInstanceSplitRequestToJSON(requestParameters['pluginInstanceSplitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginInstanceSplitFromJSON(jsonValue));
    }

    /**
     * A view for the collection of splits for a plugin instance.
     */
    async pluginsInstancesSplitsCreate(requestParameters: PluginsInstancesSplitsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstanceSplit> {
        const response = await this.pluginsInstancesSplitsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of splits for a plugin instance.
     */
    async pluginsInstancesSplitsListRaw(requestParameters: PluginsInstancesSplitsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceSplitList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesSplitsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/{id}/splits/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginInstanceSplitListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of splits for a plugin instance.
     */
    async pluginsInstancesSplitsList(requestParameters: PluginsInstancesSplitsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceSplitList> {
        const response = await this.pluginsInstancesSplitsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a plugin instance split.
     */
    async pluginsInstancesSplitsRetrieveRaw(requestParameters: PluginsInstancesSplitsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstanceSplit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesSplitsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/splits/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginInstanceSplitFromJSON(jsonValue));
    }

    /**
     * A view for a plugin instance split.
     */
    async pluginsInstancesSplitsRetrieve(requestParameters: PluginsInstancesSplitsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstanceSplit> {
        const response = await this.pluginsInstancesSplitsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A plugin instance view.
     */
    async pluginsInstancesUpdateRaw(requestParameters: PluginsInstancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginInstance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsInstancesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/instances/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PluginInstanceRequestToJSON(requestParameters['pluginInstanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginInstanceFromJSON(jsonValue));
    }

    /**
     * A plugin instance view.
     */
    async pluginsInstancesUpdate(requestParameters: PluginsInstancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginInstance> {
        const response = await this.pluginsInstancesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An integer parameter view.
     */
    async pluginsIntegerParameterRetrieveRaw(requestParameters: PluginsIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIntegerParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/integer-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntParameterFromJSON(jsonValue));
    }

    /**
     * An integer parameter view.
     */
    async pluginsIntegerParameterRetrieve(requestParameters: PluginsIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntParameter> {
        const response = await this.pluginsIntegerParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugins.
     */
    async pluginsListRaw(requestParameters: PluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugins.
     */
    async pluginsList(requestParameters: PluginsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList> {
        const response = await this.pluginsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin metas.
     */
    async pluginsMetasListRaw(requestParameters: PluginsMetasListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginMetaList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/metas/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginMetaListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin metas.
     */
    async pluginsMetasList(requestParameters: PluginsMetasListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginMetaList> {
        const response = await this.pluginsMetasListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of meta-specific plugins.
     */
    async pluginsMetasPluginsListRaw(requestParameters: PluginsMetasPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsMetasPluginsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/metas/{id}/plugins/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of meta-specific plugins.
     */
    async pluginsMetasPluginsList(requestParameters: PluginsMetasPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList> {
        const response = await this.pluginsMetasPluginsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A plugin meta view.
     */
    async pluginsMetasRetrieveRaw(requestParameters: PluginsMetasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginMeta>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsMetasRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/metas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginMetaFromJSON(jsonValue));
    }

    /**
     * A plugin meta view.
     */
    async pluginsMetasRetrieve(requestParameters: PluginsMetasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginMeta> {
        const response = await this.pluginsMetasRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin metas resulting from a query search.
     */
    async pluginsMetasSearchListRaw(requestParameters: PluginsMetasSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginMetaList>> {
        const queryParameters: any = {};

        if (requestParameters['authors'] != null) {
            queryParameters['authors'] = requestParameters['authors'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['maxCreationDate'] != null) {
            queryParameters['max_creation_date'] = (requestParameters['maxCreationDate'] as any).toISOString();
        }

        if (requestParameters['minCreationDate'] != null) {
            queryParameters['min_creation_date'] = (requestParameters['minCreationDate'] as any).toISOString();
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameAuthorsCategory'] != null) {
            queryParameters['name_authors_category'] = requestParameters['nameAuthorsCategory'];
        }

        if (requestParameters['nameExact'] != null) {
            queryParameters['name_exact'] = requestParameters['nameExact'];
        }

        if (requestParameters['nameTitleCategory'] != null) {
            queryParameters['name_title_category'] = requestParameters['nameTitleCategory'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/metas/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginMetaListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin metas resulting from a query search.
     */
    async pluginsMetasSearchList(requestParameters: PluginsMetasSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginMetaList> {
        const response = await this.pluginsMetasSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin parameters.
     */
    async pluginsParametersListRaw(requestParameters: PluginsParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginParameterList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsParametersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/{id}/parameters/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginParameterListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin parameters.
     */
    async pluginsParametersList(requestParameters: PluginsParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginParameterList> {
        const response = await this.pluginsParametersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A plugin parameter view.
     */
    async pluginsParametersRetrieveRaw(requestParameters: PluginsParametersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsParametersRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/parameters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginParameterFromJSON(jsonValue));
    }

    /**
     * A plugin parameter view.
     */
    async pluginsParametersRetrieve(requestParameters: PluginsParametersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginParameter> {
        const response = await this.pluginsParametersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A path parameter view.
     */
    async pluginsPathParameterRetrieveRaw(requestParameters: PluginsPathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsPathParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/path-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A path parameter view.
     */
    async pluginsPathParameterRetrieve(requestParameters: PluginsPathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsPathParameterRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * A plugin view.
     */
    async pluginsRetrieveRaw(requestParameters: PluginsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Plugin>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginFromJSON(jsonValue));
    }

    /**
     * A plugin view.
     */
    async pluginsRetrieve(requestParameters: PluginsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Plugin> {
        const response = await this.pluginsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugins resulting from a query search.
     */
    async pluginsSearchListRaw(requestParameters: PluginsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>> {
        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['computeResourceId'] != null) {
            queryParameters['compute_resource_id'] = requestParameters['computeResourceId'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['dockImage'] != null) {
            queryParameters['dock_image'] = requestParameters['dockImage'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['maxCreationDate'] != null) {
            queryParameters['max_creation_date'] = (requestParameters['maxCreationDate'] as any).toISOString();
        }

        if (requestParameters['minCreationDate'] != null) {
            queryParameters['min_creation_date'] = (requestParameters['minCreationDate'] as any).toISOString();
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameExact'] != null) {
            queryParameters['name_exact'] = requestParameters['nameExact'];
        }

        if (requestParameters['nameTitleCategory'] != null) {
            queryParameters['name_title_category'] = requestParameters['nameTitleCategory'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugins resulting from a query search.
     */
    async pluginsSearchList(requestParameters: PluginsSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList> {
        const response = await this.pluginsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A string parameter view.
     */
    async pluginsStringParameterRetrieveRaw(requestParameters: PluginsStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StrParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsStringParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/string-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StrParameterFromJSON(jsonValue));
    }

    /**
     * A string parameter view.
     */
    async pluginsStringParameterRetrieve(requestParameters: PluginsStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StrParameter> {
        const response = await this.pluginsStringParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A unextpath parameter view.
     */
    async pluginsUnextpathParameterRetrieveRaw(requestParameters: PluginsUnextpathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsUnextpathParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/plugins/unextpath-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A unextpath parameter view.
     */
    async pluginsUnextpathParameterRetrieve(requestParameters: PluginsUnextpathParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsUnextpathParameterRetrieveRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PluginsBooleanParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsBooleanParameterRetrieveFormatEnum = typeof PluginsBooleanParameterRetrieveFormatEnum[keyof typeof PluginsBooleanParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsComputeresourcesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsComputeresourcesListFormatEnum = typeof PluginsComputeresourcesListFormatEnum[keyof typeof PluginsComputeresourcesListFormatEnum];
/**
 * @export
 */
export const PluginsFloatParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsFloatParameterRetrieveFormatEnum = typeof PluginsFloatParameterRetrieveFormatEnum[keyof typeof PluginsFloatParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsInstancesCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesCreateFormatEnum = typeof PluginsInstancesCreateFormatEnum[keyof typeof PluginsInstancesCreateFormatEnum];
/**
 * @export
 */
export const PluginsInstancesDescendantsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesDescendantsListFormatEnum = typeof PluginsInstancesDescendantsListFormatEnum[keyof typeof PluginsInstancesDescendantsListFormatEnum];
/**
 * @export
 */
export const PluginsInstancesDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesDestroyFormatEnum = typeof PluginsInstancesDestroyFormatEnum[keyof typeof PluginsInstancesDestroyFormatEnum];
/**
 * @export
 */
export const PluginsInstancesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesListFormatEnum = typeof PluginsInstancesListFormatEnum[keyof typeof PluginsInstancesListFormatEnum];
/**
 * @export
 */
export const PluginsInstancesList2FormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesList2FormatEnum = typeof PluginsInstancesList2FormatEnum[keyof typeof PluginsInstancesList2FormatEnum];
/**
 * @export
 */
export const PluginsInstancesParametersListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesParametersListFormatEnum = typeof PluginsInstancesParametersListFormatEnum[keyof typeof PluginsInstancesParametersListFormatEnum];
/**
 * @export
 */
export const PluginsInstancesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesRetrieveFormatEnum = typeof PluginsInstancesRetrieveFormatEnum[keyof typeof PluginsInstancesRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsInstancesSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesSearchListFormatEnum = typeof PluginsInstancesSearchListFormatEnum[keyof typeof PluginsInstancesSearchListFormatEnum];
/**
 * @export
 */
export const PluginsInstancesSearchListStatusEnum = {
    Cancelled: 'cancelled',
    Created: 'created',
    FinishedSuccessfully: 'finishedSuccessfully',
    FinishedWithError: 'finishedWithError',
    RegisteringFiles: 'registeringFiles',
    Scheduled: 'scheduled',
    Started: 'started',
    Waiting: 'waiting'
} as const;
export type PluginsInstancesSearchListStatusEnum = typeof PluginsInstancesSearchListStatusEnum[keyof typeof PluginsInstancesSearchListStatusEnum];
/**
 * @export
 */
export const PluginsInstancesSplitsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesSplitsCreateFormatEnum = typeof PluginsInstancesSplitsCreateFormatEnum[keyof typeof PluginsInstancesSplitsCreateFormatEnum];
/**
 * @export
 */
export const PluginsInstancesSplitsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesSplitsListFormatEnum = typeof PluginsInstancesSplitsListFormatEnum[keyof typeof PluginsInstancesSplitsListFormatEnum];
/**
 * @export
 */
export const PluginsInstancesSplitsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesSplitsRetrieveFormatEnum = typeof PluginsInstancesSplitsRetrieveFormatEnum[keyof typeof PluginsInstancesSplitsRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsInstancesUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsInstancesUpdateFormatEnum = typeof PluginsInstancesUpdateFormatEnum[keyof typeof PluginsInstancesUpdateFormatEnum];
/**
 * @export
 */
export const PluginsIntegerParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsIntegerParameterRetrieveFormatEnum = typeof PluginsIntegerParameterRetrieveFormatEnum[keyof typeof PluginsIntegerParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsListFormatEnum = typeof PluginsListFormatEnum[keyof typeof PluginsListFormatEnum];
/**
 * @export
 */
export const PluginsMetasListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsMetasListFormatEnum = typeof PluginsMetasListFormatEnum[keyof typeof PluginsMetasListFormatEnum];
/**
 * @export
 */
export const PluginsMetasPluginsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsMetasPluginsListFormatEnum = typeof PluginsMetasPluginsListFormatEnum[keyof typeof PluginsMetasPluginsListFormatEnum];
/**
 * @export
 */
export const PluginsMetasRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsMetasRetrieveFormatEnum = typeof PluginsMetasRetrieveFormatEnum[keyof typeof PluginsMetasRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsMetasSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsMetasSearchListFormatEnum = typeof PluginsMetasSearchListFormatEnum[keyof typeof PluginsMetasSearchListFormatEnum];
/**
 * @export
 */
export const PluginsParametersListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsParametersListFormatEnum = typeof PluginsParametersListFormatEnum[keyof typeof PluginsParametersListFormatEnum];
/**
 * @export
 */
export const PluginsParametersRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsParametersRetrieveFormatEnum = typeof PluginsParametersRetrieveFormatEnum[keyof typeof PluginsParametersRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsPathParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsPathParameterRetrieveFormatEnum = typeof PluginsPathParameterRetrieveFormatEnum[keyof typeof PluginsPathParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsRetrieveFormatEnum = typeof PluginsRetrieveFormatEnum[keyof typeof PluginsRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsSearchListFormatEnum = typeof PluginsSearchListFormatEnum[keyof typeof PluginsSearchListFormatEnum];
/**
 * @export
 */
export const PluginsStringParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsStringParameterRetrieveFormatEnum = typeof PluginsStringParameterRetrieveFormatEnum[keyof typeof PluginsStringParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PluginsUnextpathParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PluginsUnextpathParameterRetrieveFormatEnum = typeof PluginsUnextpathParameterRetrieveFormatEnum[keyof typeof PluginsUnextpathParameterRetrieveFormatEnum];
