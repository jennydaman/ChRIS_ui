/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PACSFile,
  PACSSeries,
  PaginatedPACSFileList,
  PaginatedPACSSeriesList,
} from '../models/index';
import {
    PACSFileFromJSON,
    PACSFileToJSON,
    PACSSeriesFromJSON,
    PACSSeriesToJSON,
    PaginatedPACSFileListFromJSON,
    PaginatedPACSFileListToJSON,
    PaginatedPACSSeriesListFromJSON,
    PaginatedPACSSeriesListToJSON,
} from '../models/index';

export interface PacsFilesListRequest {
    format?: PacsFilesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PacsFilesRetrieveRequest {
    id: number;
    format?: PacsFilesRetrieveFormatEnum;
}

export interface PacsFilesRetrieve0Request {
    id: string;
}

export interface PacsFilesSearchListRequest {
    fname?: string;
    fnameExact?: string;
    fnameIcontains?: string;
    fnameIcontainsTopdirUnique?: string;
    fnameNslashes?: string;
    format?: PacsFilesSearchListFormatEnum;
    id?: number;
    limit?: number;
    maxCreationDate?: Date;
    minCreationDate?: Date;
    offset?: number;
}

export interface PacsSeriesListRequest {
    format?: PacsSeriesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PacsSeriesRetrieveRequest {
    id: number;
    format?: PacsSeriesRetrieveFormatEnum;
}

export interface PacsSeriesSearchListRequest {
    accessionNumber?: string;
    patientAge?: number;
    patientBirthDate?: Date;
    patientID?: string;
    patientName?: string;
    patientSex?: PacsSeriesSearchListPatientSexEnum;
    protocolName?: string;
    seriesDescription?: string;
    seriesInstanceUID?: string;
    studyDate?: Date;
    studyDescription?: string;
    studyInstanceUID?: string;
    format?: PacsSeriesSearchListFormatEnum;
    id?: number;
    limit?: number;
    maxPatientAge?: number;
    maxCreationDate?: Date;
    minPatientAge?: number;
    minCreationDate?: Date;
    offset?: number;
    pacsIdentifier?: string;
}

/**
 * PacsApi - interface
 * 
 * @export
 * @interface PacsApiInterface
 */
export interface PacsApiInterface {
    /**
     * A view for the collection of PACS files.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacsApiInterface
     */
    pacsFilesListRaw(requestParameters: PacsFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSFileList>>;

    /**
     * A view for the collection of PACS files.
     */
    pacsFilesList(requestParameters: PacsFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSFileList>;

    /**
     * A PACS file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacsApiInterface
     */
    pacsFilesRetrieveRaw(requestParameters: PacsFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PACSFile>>;

    /**
     * A PACS file view.
     */
    pacsFilesRetrieve(requestParameters: PacsFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PACSFile>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacsApiInterface
     */
    pacsFilesRetrieve_1Raw(requestParameters: PacsFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    pacsFilesRetrieve_1(requestParameters: PacsFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the collection of PACS files resulting from a query search.
     * @param {string} [fname] 
     * @param {string} [fnameExact] 
     * @param {string} [fnameIcontains] 
     * @param {string} [fnameIcontainsTopdirUnique] 
     * @param {string} [fnameNslashes] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {Date} [maxCreationDate] 
     * @param {Date} [minCreationDate] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacsApiInterface
     */
    pacsFilesSearchListRaw(requestParameters: PacsFilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSFileList>>;

    /**
     * A view for the collection of PACS files resulting from a query search.
     */
    pacsFilesSearchList(requestParameters: PacsFilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSFileList>;

    /**
     * A view for the collection of PACS Series.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacsApiInterface
     */
    pacsSeriesListRaw(requestParameters: PacsSeriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSSeriesList>>;

    /**
     * A view for the collection of PACS Series.
     */
    pacsSeriesList(requestParameters: PacsSeriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSSeriesList>;

    /**
     * A PACS Series view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacsApiInterface
     */
    pacsSeriesRetrieveRaw(requestParameters: PacsSeriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PACSSeries>>;

    /**
     * A PACS Series view.
     */
    pacsSeriesRetrieve(requestParameters: PacsSeriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PACSSeries>;

    /**
     * A view for the collection of PACS Series resulting from a query search.
     * @param {string} [accessionNumber] 
     * @param {number} [patientAge] 
     * @param {Date} [patientBirthDate] 
     * @param {string} [patientID] 
     * @param {string} [patientName] 
     * @param {'F' | 'M' | 'O'} [patientSex] * &#x60;M&#x60; - Male * &#x60;F&#x60; - Female * &#x60;O&#x60; - Other
     * @param {string} [protocolName] 
     * @param {string} [seriesDescription] 
     * @param {string} [seriesInstanceUID] 
     * @param {Date} [studyDate] 
     * @param {string} [studyDescription] 
     * @param {string} [studyInstanceUID] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [maxPatientAge] 
     * @param {Date} [maxCreationDate] 
     * @param {number} [minPatientAge] 
     * @param {Date} [minCreationDate] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [pacsIdentifier] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacsApiInterface
     */
    pacsSeriesSearchListRaw(requestParameters: PacsSeriesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSSeriesList>>;

    /**
     * A view for the collection of PACS Series resulting from a query search.
     */
    pacsSeriesSearchList(requestParameters: PacsSeriesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSSeriesList>;

}

/**
 * 
 */
export class PacsApi extends runtime.BaseAPI implements PacsApiInterface {

    /**
     * A view for the collection of PACS files.
     */
    async pacsFilesListRaw(requestParameters: PacsFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSFileList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pacs/files/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPACSFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of PACS files.
     */
    async pacsFilesList(requestParameters: PacsFilesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSFileList> {
        const response = await this.pacsFilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A PACS file view.
     */
    async pacsFilesRetrieveRaw(requestParameters: PacsFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PACSFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pacsFilesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pacs/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PACSFileFromJSON(jsonValue));
    }

    /**
     * A PACS file view.
     */
    async pacsFilesRetrieve(requestParameters: PacsFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PACSFile> {
        const response = await this.pacsFilesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async pacsFilesRetrieve_1Raw(requestParameters: PacsFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pacsFilesRetrieve_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pacs/files/{id}/.`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async pacsFilesRetrieve_1(requestParameters: PacsFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pacsFilesRetrieve_1Raw(requestParameters, initOverrides);
    }

    /**
     * A view for the collection of PACS files resulting from a query search.
     */
    async pacsFilesSearchListRaw(requestParameters: PacsFilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSFileList>> {
        const queryParameters: any = {};

        if (requestParameters['fname'] != null) {
            queryParameters['fname'] = requestParameters['fname'];
        }

        if (requestParameters['fnameExact'] != null) {
            queryParameters['fname_exact'] = requestParameters['fnameExact'];
        }

        if (requestParameters['fnameIcontains'] != null) {
            queryParameters['fname_icontains'] = requestParameters['fnameIcontains'];
        }

        if (requestParameters['fnameIcontainsTopdirUnique'] != null) {
            queryParameters['fname_icontains_topdir_unique'] = requestParameters['fnameIcontainsTopdirUnique'];
        }

        if (requestParameters['fnameNslashes'] != null) {
            queryParameters['fname_nslashes'] = requestParameters['fnameNslashes'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['maxCreationDate'] != null) {
            queryParameters['max_creation_date'] = (requestParameters['maxCreationDate'] as any).toISOString();
        }

        if (requestParameters['minCreationDate'] != null) {
            queryParameters['min_creation_date'] = (requestParameters['minCreationDate'] as any).toISOString();
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pacs/files/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPACSFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of PACS files resulting from a query search.
     */
    async pacsFilesSearchList(requestParameters: PacsFilesSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSFileList> {
        const response = await this.pacsFilesSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of PACS Series.
     */
    async pacsSeriesListRaw(requestParameters: PacsSeriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSSeriesList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pacs/series/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPACSSeriesListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of PACS Series.
     */
    async pacsSeriesList(requestParameters: PacsSeriesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSSeriesList> {
        const response = await this.pacsSeriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A PACS Series view.
     */
    async pacsSeriesRetrieveRaw(requestParameters: PacsSeriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PACSSeries>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pacsSeriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pacs/series/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PACSSeriesFromJSON(jsonValue));
    }

    /**
     * A PACS Series view.
     */
    async pacsSeriesRetrieve(requestParameters: PacsSeriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PACSSeries> {
        const response = await this.pacsSeriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of PACS Series resulting from a query search.
     */
    async pacsSeriesSearchListRaw(requestParameters: PacsSeriesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPACSSeriesList>> {
        const queryParameters: any = {};

        if (requestParameters['accessionNumber'] != null) {
            queryParameters['AccessionNumber'] = requestParameters['accessionNumber'];
        }

        if (requestParameters['patientAge'] != null) {
            queryParameters['PatientAge'] = requestParameters['patientAge'];
        }

        if (requestParameters['patientBirthDate'] != null) {
            queryParameters['PatientBirthDate'] = (requestParameters['patientBirthDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['patientID'] != null) {
            queryParameters['PatientID'] = requestParameters['patientID'];
        }

        if (requestParameters['patientName'] != null) {
            queryParameters['PatientName'] = requestParameters['patientName'];
        }

        if (requestParameters['patientSex'] != null) {
            queryParameters['PatientSex'] = requestParameters['patientSex'];
        }

        if (requestParameters['protocolName'] != null) {
            queryParameters['ProtocolName'] = requestParameters['protocolName'];
        }

        if (requestParameters['seriesDescription'] != null) {
            queryParameters['SeriesDescription'] = requestParameters['seriesDescription'];
        }

        if (requestParameters['seriesInstanceUID'] != null) {
            queryParameters['SeriesInstanceUID'] = requestParameters['seriesInstanceUID'];
        }

        if (requestParameters['studyDate'] != null) {
            queryParameters['StudyDate'] = (requestParameters['studyDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['studyDescription'] != null) {
            queryParameters['StudyDescription'] = requestParameters['studyDescription'];
        }

        if (requestParameters['studyInstanceUID'] != null) {
            queryParameters['StudyInstanceUID'] = requestParameters['studyInstanceUID'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['maxPatientAge'] != null) {
            queryParameters['max_PatientAge'] = requestParameters['maxPatientAge'];
        }

        if (requestParameters['maxCreationDate'] != null) {
            queryParameters['max_creation_date'] = (requestParameters['maxCreationDate'] as any).toISOString();
        }

        if (requestParameters['minPatientAge'] != null) {
            queryParameters['min_PatientAge'] = requestParameters['minPatientAge'];
        }

        if (requestParameters['minCreationDate'] != null) {
            queryParameters['min_creation_date'] = (requestParameters['minCreationDate'] as any).toISOString();
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pacsIdentifier'] != null) {
            queryParameters['pacs_identifier'] = requestParameters['pacsIdentifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pacs/series/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPACSSeriesListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of PACS Series resulting from a query search.
     */
    async pacsSeriesSearchList(requestParameters: PacsSeriesSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPACSSeriesList> {
        const response = await this.pacsSeriesSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PacsFilesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PacsFilesListFormatEnum = typeof PacsFilesListFormatEnum[keyof typeof PacsFilesListFormatEnum];
/**
 * @export
 */
export const PacsFilesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PacsFilesRetrieveFormatEnum = typeof PacsFilesRetrieveFormatEnum[keyof typeof PacsFilesRetrieveFormatEnum];
/**
 * @export
 */
export const PacsFilesSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PacsFilesSearchListFormatEnum = typeof PacsFilesSearchListFormatEnum[keyof typeof PacsFilesSearchListFormatEnum];
/**
 * @export
 */
export const PacsSeriesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PacsSeriesListFormatEnum = typeof PacsSeriesListFormatEnum[keyof typeof PacsSeriesListFormatEnum];
/**
 * @export
 */
export const PacsSeriesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PacsSeriesRetrieveFormatEnum = typeof PacsSeriesRetrieveFormatEnum[keyof typeof PacsSeriesRetrieveFormatEnum];
/**
 * @export
 */
export const PacsSeriesSearchListPatientSexEnum = {
    F: 'F',
    M: 'M',
    O: 'O'
} as const;
export type PacsSeriesSearchListPatientSexEnum = typeof PacsSeriesSearchListPatientSexEnum[keyof typeof PacsSeriesSearchListPatientSexEnum];
/**
 * @export
 */
export const PacsSeriesSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PacsSeriesSearchListFormatEnum = typeof PacsSeriesSearchListFormatEnum[keyof typeof PacsSeriesSearchListFormatEnum];
