/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileDownloadToken,
  FileDownloadTokenRequest,
  PaginatedFileDownloadTokenList,
} from '../models/index';
import {
    FileDownloadTokenFromJSON,
    FileDownloadTokenToJSON,
    FileDownloadTokenRequestFromJSON,
    FileDownloadTokenRequestToJSON,
    PaginatedFileDownloadTokenListFromJSON,
    PaginatedFileDownloadTokenListToJSON,
} from '../models/index';

export interface DownloadtokensCreateRequest {
    format?: DownloadtokensCreateFormatEnum;
    fileDownloadTokenRequest?: FileDownloadTokenRequest;
}

export interface DownloadtokensListRequest {
    format?: DownloadtokensListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface DownloadtokensRetrieveRequest {
    id: number;
    format?: DownloadtokensRetrieveFormatEnum;
}

export interface DownloadtokensSearchListRequest {
    format?: DownloadtokensSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

/**
 * DownloadtokensApi - interface
 * 
 * @export
 * @interface DownloadtokensApiInterface
 */
export interface DownloadtokensApiInterface {
    /**
     * A view for the collection of user-specific file download tokens.
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileDownloadTokenRequest} [fileDownloadTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadtokensApiInterface
     */
    downloadtokensCreateRaw(requestParameters: DownloadtokensCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDownloadToken>>;

    /**
     * A view for the collection of user-specific file download tokens.
     */
    downloadtokensCreate(requestParameters: DownloadtokensCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDownloadToken>;

    /**
     * A view for the collection of user-specific file download tokens.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadtokensApiInterface
     */
    downloadtokensListRaw(requestParameters: DownloadtokensListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileDownloadTokenList>>;

    /**
     * A view for the collection of user-specific file download tokens.
     */
    downloadtokensList(requestParameters: DownloadtokensListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileDownloadTokenList>;

    /**
     * A file download token view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadtokensApiInterface
     */
    downloadtokensRetrieveRaw(requestParameters: DownloadtokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDownloadToken>>;

    /**
     * A file download token view.
     */
    downloadtokensRetrieve(requestParameters: DownloadtokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDownloadToken>;

    /**
     * A view for the collection of user-specific file download tokens resulting from a query search.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadtokensApiInterface
     */
    downloadtokensSearchListRaw(requestParameters: DownloadtokensSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileDownloadTokenList>>;

    /**
     * A view for the collection of user-specific file download tokens resulting from a query search.
     */
    downloadtokensSearchList(requestParameters: DownloadtokensSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileDownloadTokenList>;

}

/**
 * 
 */
export class DownloadtokensApi extends runtime.BaseAPI implements DownloadtokensApiInterface {

    /**
     * A view for the collection of user-specific file download tokens.
     */
    async downloadtokensCreateRaw(requestParameters: DownloadtokensCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDownloadToken>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/downloadtokens/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileDownloadTokenRequestToJSON(requestParameters['fileDownloadTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDownloadTokenFromJSON(jsonValue));
    }

    /**
     * A view for the collection of user-specific file download tokens.
     */
    async downloadtokensCreate(requestParameters: DownloadtokensCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDownloadToken> {
        const response = await this.downloadtokensCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of user-specific file download tokens.
     */
    async downloadtokensListRaw(requestParameters: DownloadtokensListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileDownloadTokenList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/downloadtokens/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileDownloadTokenListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of user-specific file download tokens.
     */
    async downloadtokensList(requestParameters: DownloadtokensListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileDownloadTokenList> {
        const response = await this.downloadtokensListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A file download token view.
     */
    async downloadtokensRetrieveRaw(requestParameters: DownloadtokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDownloadToken>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling downloadtokensRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/downloadtokens/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDownloadTokenFromJSON(jsonValue));
    }

    /**
     * A file download token view.
     */
    async downloadtokensRetrieve(requestParameters: DownloadtokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDownloadToken> {
        const response = await this.downloadtokensRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of user-specific file download tokens resulting from a query search.
     */
    async downloadtokensSearchListRaw(requestParameters: DownloadtokensSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileDownloadTokenList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/downloadtokens/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileDownloadTokenListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of user-specific file download tokens resulting from a query search.
     */
    async downloadtokensSearchList(requestParameters: DownloadtokensSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileDownloadTokenList> {
        const response = await this.downloadtokensSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DownloadtokensCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type DownloadtokensCreateFormatEnum = typeof DownloadtokensCreateFormatEnum[keyof typeof DownloadtokensCreateFormatEnum];
/**
 * @export
 */
export const DownloadtokensListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type DownloadtokensListFormatEnum = typeof DownloadtokensListFormatEnum[keyof typeof DownloadtokensListFormatEnum];
/**
 * @export
 */
export const DownloadtokensRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type DownloadtokensRetrieveFormatEnum = typeof DownloadtokensRetrieveFormatEnum[keyof typeof DownloadtokensRetrieveFormatEnum];
/**
 * @export
 */
export const DownloadtokensSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type DownloadtokensSearchListFormatEnum = typeof DownloadtokensSearchListFormatEnum[keyof typeof DownloadtokensSearchListFormatEnum];
