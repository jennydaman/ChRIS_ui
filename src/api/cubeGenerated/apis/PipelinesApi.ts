/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultPipingBoolParameter,
  DefaultPipingBoolParameterRequest,
  DefaultPipingFloatParameter,
  DefaultPipingFloatParameterRequest,
  DefaultPipingIntParameter,
  DefaultPipingIntParameterRequest,
  DefaultPipingStrParameter,
  DefaultPipingStrParameterRequest,
  PaginatedGenericDefaultPipingParameterList,
  PaginatedPipelineList,
  PaginatedPipelineSourceFileList,
  PaginatedPluginInstanceList,
  PaginatedPluginList,
  PaginatedPluginPipingList,
  PaginatedWorkflowList,
  Pipeline,
  PipelineCustomJson,
  PipelineRequest,
  PipelineSourceFile,
  PipelineSourceFileRequest,
  PluginPiping,
  Workflow,
  WorkflowRequest,
} from '../models/index';
import {
    DefaultPipingBoolParameterFromJSON,
    DefaultPipingBoolParameterToJSON,
    DefaultPipingBoolParameterRequestFromJSON,
    DefaultPipingBoolParameterRequestToJSON,
    DefaultPipingFloatParameterFromJSON,
    DefaultPipingFloatParameterToJSON,
    DefaultPipingFloatParameterRequestFromJSON,
    DefaultPipingFloatParameterRequestToJSON,
    DefaultPipingIntParameterFromJSON,
    DefaultPipingIntParameterToJSON,
    DefaultPipingIntParameterRequestFromJSON,
    DefaultPipingIntParameterRequestToJSON,
    DefaultPipingStrParameterFromJSON,
    DefaultPipingStrParameterToJSON,
    DefaultPipingStrParameterRequestFromJSON,
    DefaultPipingStrParameterRequestToJSON,
    PaginatedGenericDefaultPipingParameterListFromJSON,
    PaginatedGenericDefaultPipingParameterListToJSON,
    PaginatedPipelineListFromJSON,
    PaginatedPipelineListToJSON,
    PaginatedPipelineSourceFileListFromJSON,
    PaginatedPipelineSourceFileListToJSON,
    PaginatedPluginInstanceListFromJSON,
    PaginatedPluginInstanceListToJSON,
    PaginatedPluginListFromJSON,
    PaginatedPluginListToJSON,
    PaginatedPluginPipingListFromJSON,
    PaginatedPluginPipingListToJSON,
    PaginatedWorkflowListFromJSON,
    PaginatedWorkflowListToJSON,
    PipelineFromJSON,
    PipelineToJSON,
    PipelineCustomJsonFromJSON,
    PipelineCustomJsonToJSON,
    PipelineRequestFromJSON,
    PipelineRequestToJSON,
    PipelineSourceFileFromJSON,
    PipelineSourceFileToJSON,
    PipelineSourceFileRequestFromJSON,
    PipelineSourceFileRequestToJSON,
    PluginPipingFromJSON,
    PluginPipingToJSON,
    WorkflowFromJSON,
    WorkflowToJSON,
    WorkflowRequestFromJSON,
    WorkflowRequestToJSON,
} from '../models/index';

export interface PipelinesBooleanParameterRetrieveRequest {
    id: number;
    format?: PipelinesBooleanParameterRetrieveFormatEnum;
}

export interface PipelinesBooleanParameterUpdateRequest {
    id: number;
    format?: PipelinesBooleanParameterUpdateFormatEnum;
    defaultPipingBoolParameterRequest?: DefaultPipingBoolParameterRequest;
}

export interface PipelinesCreateRequest {
    pipelineRequest: PipelineRequest;
    format?: PipelinesCreateFormatEnum;
}

export interface PipelinesDestroyRequest {
    id: number;
    format?: PipelinesDestroyFormatEnum;
}

export interface PipelinesFloatParameterRetrieveRequest {
    id: number;
    format?: PipelinesFloatParameterRetrieveFormatEnum;
}

export interface PipelinesFloatParameterUpdateRequest {
    id: number;
    format?: PipelinesFloatParameterUpdateFormatEnum;
    defaultPipingFloatParameterRequest?: DefaultPipingFloatParameterRequest;
}

export interface PipelinesIntegerParameterRetrieveRequest {
    id: number;
    format?: PipelinesIntegerParameterRetrieveFormatEnum;
}

export interface PipelinesIntegerParameterUpdateRequest {
    id: number;
    format?: PipelinesIntegerParameterUpdateFormatEnum;
    defaultPipingIntParameterRequest?: DefaultPipingIntParameterRequest;
}

export interface PipelinesJsonRetrieveRequest {
    id: number;
    format?: PipelinesJsonRetrieveFormatEnum;
}

export interface PipelinesListRequest {
    format?: PipelinesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesParametersListRequest {
    id: number;
    format?: PipelinesParametersListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesPipingsListRequest {
    id: number;
    format?: PipelinesPipingsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesPipingsRetrieveRequest {
    id: number;
    format?: PipelinesPipingsRetrieveFormatEnum;
}

export interface PipelinesPluginsListRequest {
    id: number;
    format?: PipelinesPluginsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesRetrieveRequest {
    id: number;
    format?: PipelinesRetrieveFormatEnum;
}

export interface PipelinesSearchListRequest {
    authors?: string;
    category?: string;
    description?: string;
    format?: PipelinesSearchListFormatEnum;
    id?: number;
    limit?: number;
    maxCreationDate?: Date;
    minCreationDate?: Date;
    name?: string;
    offset?: number;
    ownerUsername?: string;
}

export interface PipelinesSourcefilesCreateRequest {
    pipelineSourceFileRequest: PipelineSourceFileRequest;
    format?: PipelinesSourcefilesCreateFormatEnum;
}

export interface PipelinesSourcefilesListRequest {
    format?: PipelinesSourcefilesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesSourcefilesRetrieveRequest {
    id: number;
    format?: PipelinesSourcefilesRetrieveFormatEnum;
}

export interface PipelinesSourcefilesRetrieve0Request {
    id: string;
}

export interface PipelinesSourcefilesSearchListRequest {
    fname?: string;
    fnameExact?: string;
    fnameIcontains?: string;
    format?: PipelinesSourcefilesSearchListFormatEnum;
    id?: number;
    limit?: number;
    maxCreationDate?: Date;
    minCreationDate?: Date;
    offset?: number;
    uploaderUsername?: string;
}

export interface PipelinesStringParameterRetrieveRequest {
    id: number;
    format?: PipelinesStringParameterRetrieveFormatEnum;
}

export interface PipelinesStringParameterUpdateRequest {
    id: number;
    format?: PipelinesStringParameterUpdateFormatEnum;
    defaultPipingStrParameterRequest?: DefaultPipingStrParameterRequest;
}

export interface PipelinesUpdateRequest {
    id: number;
    pipelineRequest: PipelineRequest;
    format?: PipelinesUpdateFormatEnum;
}

export interface PipelinesWorkflowsCreateRequest {
    id: number;
    format?: PipelinesWorkflowsCreateFormatEnum;
    workflowRequest?: WorkflowRequest;
}

export interface PipelinesWorkflowsDestroyRequest {
    id: number;
    format?: PipelinesWorkflowsDestroyFormatEnum;
}

export interface PipelinesWorkflowsListRequest {
    format?: PipelinesWorkflowsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesWorkflowsList2Request {
    id: number;
    format?: PipelinesWorkflowsList2FormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesWorkflowsPlugininstancesListRequest {
    id: number;
    format?: PipelinesWorkflowsPlugininstancesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PipelinesWorkflowsRetrieveRequest {
    id: number;
    format?: PipelinesWorkflowsRetrieveFormatEnum;
}

export interface PipelinesWorkflowsSearchListRequest {
    format?: PipelinesWorkflowsSearchListFormatEnum;
    id?: number;
    limit?: number;
    offset?: number;
    ownerUsername?: string;
    pipelineName?: string;
    title?: string;
}

export interface PipelinesWorkflowsUpdateRequest {
    id: number;
    format?: PipelinesWorkflowsUpdateFormatEnum;
    workflowRequest?: WorkflowRequest;
}

/**
 * PipelinesApi - interface
 * 
 * @export
 * @interface PipelinesApiInterface
 */
export interface PipelinesApiInterface {
    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesBooleanParameterRetrieveRaw(requestParameters: PipelinesBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingBoolParameter>>;

    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesBooleanParameterRetrieve(requestParameters: PipelinesBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingBoolParameter>;

    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {DefaultPipingBoolParameterRequest} [defaultPipingBoolParameterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesBooleanParameterUpdateRaw(requestParameters: PipelinesBooleanParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingBoolParameter>>;

    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesBooleanParameterUpdate(requestParameters: PipelinesBooleanParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingBoolParameter>;

    /**
     * A view for the collection of pipelines.
     * @param {PipelineRequest} pipelineRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesCreateRaw(requestParameters: PipelinesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>>;

    /**
     * A view for the collection of pipelines.
     */
    pipelinesCreate(requestParameters: PipelinesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline>;

    /**
     * A pipeline view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesDestroyRaw(requestParameters: PipelinesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A pipeline view.
     */
    pipelinesDestroy(requestParameters: PipelinesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesFloatParameterRetrieveRaw(requestParameters: PipelinesFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingFloatParameter>>;

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesFloatParameterRetrieve(requestParameters: PipelinesFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingFloatParameter>;

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {DefaultPipingFloatParameterRequest} [defaultPipingFloatParameterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesFloatParameterUpdateRaw(requestParameters: PipelinesFloatParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingFloatParameter>>;

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesFloatParameterUpdate(requestParameters: PipelinesFloatParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingFloatParameter>;

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesIntegerParameterRetrieveRaw(requestParameters: PipelinesIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingIntParameter>>;

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesIntegerParameterRetrieve(requestParameters: PipelinesIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingIntParameter>;

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {DefaultPipingIntParameterRequest} [defaultPipingIntParameterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesIntegerParameterUpdateRaw(requestParameters: PipelinesIntegerParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingIntParameter>>;

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesIntegerParameterUpdate(requestParameters: PipelinesIntegerParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingIntParameter>;

    /**
     * A pipeline with a custom JSON view resembling the originally submitted pipeline data.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesJsonRetrieveRaw(requestParameters: PipelinesJsonRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineCustomJson>>;

    /**
     * A pipeline with a custom JSON view resembling the originally submitted pipeline data.
     */
    pipelinesJsonRetrieve(requestParameters: PipelinesJsonRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineCustomJson>;

    /**
     * A view for the collection of pipelines.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesListRaw(requestParameters: PipelinesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineList>>;

    /**
     * A view for the collection of pipelines.
     */
    pipelinesList(requestParameters: PipelinesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineList>;

    /**
     * A view for the collection of pipeline-specific plugin parameters\' defaults.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesParametersListRaw(requestParameters: PipelinesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGenericDefaultPipingParameterList>>;

    /**
     * A view for the collection of pipeline-specific plugin parameters\' defaults.
     */
    pipelinesParametersList(requestParameters: PipelinesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGenericDefaultPipingParameterList>;

    /**
     * A view for the collection of pipeline-specific plugin pipings.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesPipingsListRaw(requestParameters: PipelinesPipingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginPipingList>>;

    /**
     * A view for the collection of pipeline-specific plugin pipings.
     */
    pipelinesPipingsList(requestParameters: PipelinesPipingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginPipingList>;

    /**
     * A plugin piping view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesPipingsRetrieveRaw(requestParameters: PipelinesPipingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginPiping>>;

    /**
     * A plugin piping view.
     */
    pipelinesPipingsRetrieve(requestParameters: PipelinesPipingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginPiping>;

    /**
     * A view for a pipeline-specific collection of plugins.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesPluginsListRaw(requestParameters: PipelinesPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>>;

    /**
     * A view for a pipeline-specific collection of plugins.
     */
    pipelinesPluginsList(requestParameters: PipelinesPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList>;

    /**
     * A pipeline view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesRetrieveRaw(requestParameters: PipelinesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>>;

    /**
     * A pipeline view.
     */
    pipelinesRetrieve(requestParameters: PipelinesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline>;

    /**
     * A view for the collection of pipelines resulting from a query search.
     * @param {string} [authors] 
     * @param {string} [category] 
     * @param {string} [description] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {Date} [maxCreationDate] 
     * @param {Date} [minCreationDate] 
     * @param {string} [name] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ownerUsername] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesSearchListRaw(requestParameters: PipelinesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineList>>;

    /**
     * A view for the collection of pipelines resulting from a query search.
     */
    pipelinesSearchList(requestParameters: PipelinesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineList>;

    /**
     * A view for the collection of pipeline source files.
     * @param {PipelineSourceFileRequest} pipelineSourceFileRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesSourcefilesCreateRaw(requestParameters: PipelinesSourcefilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineSourceFile>>;

    /**
     * A view for the collection of pipeline source files.
     */
    pipelinesSourcefilesCreate(requestParameters: PipelinesSourcefilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineSourceFile>;

    /**
     * A view for the collection of pipeline source files.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesSourcefilesListRaw(requestParameters: PipelinesSourcefilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineSourceFileList>>;

    /**
     * A view for the collection of pipeline source files.
     */
    pipelinesSourcefilesList(requestParameters: PipelinesSourcefilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineSourceFileList>;

    /**
     * A pipeline source file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesSourcefilesRetrieveRaw(requestParameters: PipelinesSourcefilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineSourceFile>>;

    /**
     * A pipeline source file view.
     */
    pipelinesSourcefilesRetrieve(requestParameters: PipelinesSourcefilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineSourceFile>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesSourcefilesRetrieve_1Raw(requestParameters: PipelinesSourcefilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    pipelinesSourcefilesRetrieve_1(requestParameters: PipelinesSourcefilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the collection of pipeline source files resulting from a query search.
     * @param {string} [fname] 
     * @param {string} [fnameExact] 
     * @param {string} [fnameIcontains] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {Date} [maxCreationDate] 
     * @param {Date} [minCreationDate] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [uploaderUsername] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesSourcefilesSearchListRaw(requestParameters: PipelinesSourcefilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineSourceFileList>>;

    /**
     * A view for the collection of pipeline source files resulting from a query search.
     */
    pipelinesSourcefilesSearchList(requestParameters: PipelinesSourcefilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineSourceFileList>;

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesStringParameterRetrieveRaw(requestParameters: PipelinesStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingStrParameter>>;

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesStringParameterRetrieve(requestParameters: PipelinesStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingStrParameter>;

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {DefaultPipingStrParameterRequest} [defaultPipingStrParameterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesStringParameterUpdateRaw(requestParameters: PipelinesStringParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingStrParameter>>;

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    pipelinesStringParameterUpdate(requestParameters: PipelinesStringParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingStrParameter>;

    /**
     * A pipeline view.
     * @param {number} id 
     * @param {PipelineRequest} pipelineRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesUpdateRaw(requestParameters: PipelinesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>>;

    /**
     * A pipeline view.
     */
    pipelinesUpdate(requestParameters: PipelinesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline>;

    /**
     * A view for the collection of pipeline-specific workflows.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {WorkflowRequest} [workflowRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsCreateRaw(requestParameters: PipelinesWorkflowsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>>;

    /**
     * A view for the collection of pipeline-specific workflows.
     */
    pipelinesWorkflowsCreate(requestParameters: PipelinesWorkflowsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow>;

    /**
     * A workflow view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsDestroyRaw(requestParameters: PipelinesWorkflowsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A workflow view.
     */
    pipelinesWorkflowsDestroy(requestParameters: PipelinesWorkflowsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the collection of all workflows.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsListRaw(requestParameters: PipelinesWorkflowsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedWorkflowList>>;

    /**
     * A view for the collection of all workflows.
     */
    pipelinesWorkflowsList(requestParameters: PipelinesWorkflowsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedWorkflowList>;

    /**
     * A view for the collection of pipeline-specific workflows.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsList2Raw(requestParameters: PipelinesWorkflowsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedWorkflowList>>;

    /**
     * A view for the collection of pipeline-specific workflows.
     */
    pipelinesWorkflowsList2(requestParameters: PipelinesWorkflowsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedWorkflowList>;

    /**
     * A view for the collection of plugin instances that compose the workflow.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsPlugininstancesListRaw(requestParameters: PipelinesWorkflowsPlugininstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>>;

    /**
     * A view for the collection of plugin instances that compose the workflow.
     */
    pipelinesWorkflowsPlugininstancesList(requestParameters: PipelinesWorkflowsPlugininstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList>;

    /**
     * A workflow view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsRetrieveRaw(requestParameters: PipelinesWorkflowsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>>;

    /**
     * A workflow view.
     */
    pipelinesWorkflowsRetrieve(requestParameters: PipelinesWorkflowsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow>;

    /**
     * A view for the collection of workflows resulting from a query search.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ownerUsername] 
     * @param {string} [pipelineName] 
     * @param {string} [title] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsSearchListRaw(requestParameters: PipelinesWorkflowsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedWorkflowList>>;

    /**
     * A view for the collection of workflows resulting from a query search.
     */
    pipelinesWorkflowsSearchList(requestParameters: PipelinesWorkflowsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedWorkflowList>;

    /**
     * A workflow view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {WorkflowRequest} [workflowRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    pipelinesWorkflowsUpdateRaw(requestParameters: PipelinesWorkflowsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>>;

    /**
     * A workflow view.
     */
    pipelinesWorkflowsUpdate(requestParameters: PipelinesWorkflowsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow>;

}

/**
 * 
 */
export class PipelinesApi extends runtime.BaseAPI implements PipelinesApiInterface {

    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesBooleanParameterRetrieveRaw(requestParameters: PipelinesBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingBoolParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesBooleanParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/boolean-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingBoolParameterFromJSON(jsonValue));
    }

    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesBooleanParameterRetrieve(requestParameters: PipelinesBooleanParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingBoolParameter> {
        const response = await this.pipelinesBooleanParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesBooleanParameterUpdateRaw(requestParameters: PipelinesBooleanParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingBoolParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesBooleanParameterUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/boolean-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DefaultPipingBoolParameterRequestToJSON(requestParameters['defaultPipingBoolParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingBoolParameterFromJSON(jsonValue));
    }

    /**
     * A view for a boolean default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesBooleanParameterUpdate(requestParameters: PipelinesBooleanParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingBoolParameter> {
        const response = await this.pipelinesBooleanParameterUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipelines.
     */
    async pipelinesCreateRaw(requestParameters: PipelinesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters['pipelineRequest'] == null) {
            throw new runtime.RequiredError(
                'pipelineRequest',
                'Required parameter "pipelineRequest" was null or undefined when calling pipelinesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineRequestToJSON(requestParameters['pipelineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipelines.
     */
    async pipelinesCreate(requestParameters: PipelinesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.pipelinesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A pipeline view.
     */
    async pipelinesDestroyRaw(requestParameters: PipelinesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A pipeline view.
     */
    async pipelinesDestroy(requestParameters: PipelinesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pipelinesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesFloatParameterRetrieveRaw(requestParameters: PipelinesFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingFloatParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesFloatParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/float-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingFloatParameterFromJSON(jsonValue));
    }

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesFloatParameterRetrieve(requestParameters: PipelinesFloatParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingFloatParameter> {
        const response = await this.pipelinesFloatParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesFloatParameterUpdateRaw(requestParameters: PipelinesFloatParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingFloatParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesFloatParameterUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/float-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DefaultPipingFloatParameterRequestToJSON(requestParameters['defaultPipingFloatParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingFloatParameterFromJSON(jsonValue));
    }

    /**
     * A view for a float default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesFloatParameterUpdate(requestParameters: PipelinesFloatParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingFloatParameter> {
        const response = await this.pipelinesFloatParameterUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesIntegerParameterRetrieveRaw(requestParameters: PipelinesIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingIntParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesIntegerParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/integer-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingIntParameterFromJSON(jsonValue));
    }

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesIntegerParameterRetrieve(requestParameters: PipelinesIntegerParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingIntParameter> {
        const response = await this.pipelinesIntegerParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesIntegerParameterUpdateRaw(requestParameters: PipelinesIntegerParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingIntParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesIntegerParameterUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/integer-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DefaultPipingIntParameterRequestToJSON(requestParameters['defaultPipingIntParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingIntParameterFromJSON(jsonValue));
    }

    /**
     * A view for an integer default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesIntegerParameterUpdate(requestParameters: PipelinesIntegerParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingIntParameter> {
        const response = await this.pipelinesIntegerParameterUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A pipeline with a custom JSON view resembling the originally submitted pipeline data.
     */
    async pipelinesJsonRetrieveRaw(requestParameters: PipelinesJsonRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineCustomJson>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesJsonRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/json/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineCustomJsonFromJSON(jsonValue));
    }

    /**
     * A pipeline with a custom JSON view resembling the originally submitted pipeline data.
     */
    async pipelinesJsonRetrieve(requestParameters: PipelinesJsonRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineCustomJson> {
        const response = await this.pipelinesJsonRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipelines.
     */
    async pipelinesListRaw(requestParameters: PipelinesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPipelineListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipelines.
     */
    async pipelinesList(requestParameters: PipelinesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineList> {
        const response = await this.pipelinesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipeline-specific plugin parameters\' defaults.
     */
    async pipelinesParametersListRaw(requestParameters: PipelinesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGenericDefaultPipingParameterList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesParametersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/parameters/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGenericDefaultPipingParameterListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipeline-specific plugin parameters\' defaults.
     */
    async pipelinesParametersList(requestParameters: PipelinesParametersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGenericDefaultPipingParameterList> {
        const response = await this.pipelinesParametersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipeline-specific plugin pipings.
     */
    async pipelinesPipingsListRaw(requestParameters: PipelinesPipingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginPipingList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesPipingsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/pipings/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginPipingListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipeline-specific plugin pipings.
     */
    async pipelinesPipingsList(requestParameters: PipelinesPipingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginPipingList> {
        const response = await this.pipelinesPipingsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A plugin piping view.
     */
    async pipelinesPipingsRetrieveRaw(requestParameters: PipelinesPipingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginPiping>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesPipingsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/pipings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginPipingFromJSON(jsonValue));
    }

    /**
     * A plugin piping view.
     */
    async pipelinesPipingsRetrieve(requestParameters: PipelinesPipingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginPiping> {
        const response = await this.pipelinesPipingsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a pipeline-specific collection of plugins.
     */
    async pipelinesPluginsListRaw(requestParameters: PipelinesPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesPluginsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/plugins/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginListFromJSON(jsonValue));
    }

    /**
     * A view for a pipeline-specific collection of plugins.
     */
    async pipelinesPluginsList(requestParameters: PipelinesPluginsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginList> {
        const response = await this.pipelinesPluginsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A pipeline view.
     */
    async pipelinesRetrieveRaw(requestParameters: PipelinesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * A pipeline view.
     */
    async pipelinesRetrieve(requestParameters: PipelinesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.pipelinesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipelines resulting from a query search.
     */
    async pipelinesSearchListRaw(requestParameters: PipelinesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineList>> {
        const queryParameters: any = {};

        if (requestParameters['authors'] != null) {
            queryParameters['authors'] = requestParameters['authors'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['maxCreationDate'] != null) {
            queryParameters['max_creation_date'] = (requestParameters['maxCreationDate'] as any).toISOString();
        }

        if (requestParameters['minCreationDate'] != null) {
            queryParameters['min_creation_date'] = (requestParameters['minCreationDate'] as any).toISOString();
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['ownerUsername'] != null) {
            queryParameters['owner_username'] = requestParameters['ownerUsername'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPipelineListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipelines resulting from a query search.
     */
    async pipelinesSearchList(requestParameters: PipelinesSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineList> {
        const response = await this.pipelinesSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipeline source files.
     */
    async pipelinesSourcefilesCreateRaw(requestParameters: PipelinesSourcefilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineSourceFile>> {
        if (requestParameters['pipelineSourceFileRequest'] == null) {
            throw new runtime.RequiredError(
                'pipelineSourceFileRequest',
                'Required parameter "pipelineSourceFileRequest" was null or undefined when calling pipelinesSourcefilesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/sourcefiles/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineSourceFileRequestToJSON(requestParameters['pipelineSourceFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineSourceFileFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipeline source files.
     */
    async pipelinesSourcefilesCreate(requestParameters: PipelinesSourcefilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineSourceFile> {
        const response = await this.pipelinesSourcefilesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipeline source files.
     */
    async pipelinesSourcefilesListRaw(requestParameters: PipelinesSourcefilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineSourceFileList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/sourcefiles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPipelineSourceFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipeline source files.
     */
    async pipelinesSourcefilesList(requestParameters: PipelinesSourcefilesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineSourceFileList> {
        const response = await this.pipelinesSourcefilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A pipeline source file view.
     */
    async pipelinesSourcefilesRetrieveRaw(requestParameters: PipelinesSourcefilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineSourceFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesSourcefilesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/sourcefiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineSourceFileFromJSON(jsonValue));
    }

    /**
     * A pipeline source file view.
     */
    async pipelinesSourcefilesRetrieve(requestParameters: PipelinesSourcefilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineSourceFile> {
        const response = await this.pipelinesSourcefilesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async pipelinesSourcefilesRetrieve_1Raw(requestParameters: PipelinesSourcefilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesSourcefilesRetrieve_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/sourcefiles/{id}/.`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async pipelinesSourcefilesRetrieve_1(requestParameters: PipelinesSourcefilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pipelinesSourcefilesRetrieve_1Raw(requestParameters, initOverrides);
    }

    /**
     * A view for the collection of pipeline source files resulting from a query search.
     */
    async pipelinesSourcefilesSearchListRaw(requestParameters: PipelinesSourcefilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineSourceFileList>> {
        const queryParameters: any = {};

        if (requestParameters['fname'] != null) {
            queryParameters['fname'] = requestParameters['fname'];
        }

        if (requestParameters['fnameExact'] != null) {
            queryParameters['fname_exact'] = requestParameters['fnameExact'];
        }

        if (requestParameters['fnameIcontains'] != null) {
            queryParameters['fname_icontains'] = requestParameters['fnameIcontains'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['maxCreationDate'] != null) {
            queryParameters['max_creation_date'] = (requestParameters['maxCreationDate'] as any).toISOString();
        }

        if (requestParameters['minCreationDate'] != null) {
            queryParameters['min_creation_date'] = (requestParameters['minCreationDate'] as any).toISOString();
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['uploaderUsername'] != null) {
            queryParameters['uploader_username'] = requestParameters['uploaderUsername'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/sourcefiles/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPipelineSourceFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipeline source files resulting from a query search.
     */
    async pipelinesSourcefilesSearchList(requestParameters: PipelinesSourcefilesSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineSourceFileList> {
        const response = await this.pipelinesSourcefilesSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesStringParameterRetrieveRaw(requestParameters: PipelinesStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingStrParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesStringParameterRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/string-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingStrParameterFromJSON(jsonValue));
    }

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesStringParameterRetrieve(requestParameters: PipelinesStringParameterRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingStrParameter> {
        const response = await this.pipelinesStringParameterRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesStringParameterUpdateRaw(requestParameters: PipelinesStringParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPipingStrParameter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesStringParameterUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/string-parameter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DefaultPipingStrParameterRequestToJSON(requestParameters['defaultPipingStrParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPipingStrParameterFromJSON(jsonValue));
    }

    /**
     * A view for a string default value for a plugin parameter in a pipeline\'s plugin piping.
     */
    async pipelinesStringParameterUpdate(requestParameters: PipelinesStringParameterUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPipingStrParameter> {
        const response = await this.pipelinesStringParameterUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A pipeline view.
     */
    async pipelinesUpdateRaw(requestParameters: PipelinesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesUpdate().'
            );
        }

        if (requestParameters['pipelineRequest'] == null) {
            throw new runtime.RequiredError(
                'pipelineRequest',
                'Required parameter "pipelineRequest" was null or undefined when calling pipelinesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineRequestToJSON(requestParameters['pipelineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * A pipeline view.
     */
    async pipelinesUpdate(requestParameters: PipelinesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.pipelinesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipeline-specific workflows.
     */
    async pipelinesWorkflowsCreateRaw(requestParameters: PipelinesWorkflowsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesWorkflowsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/workflows/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowRequestToJSON(requestParameters['workflowRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipeline-specific workflows.
     */
    async pipelinesWorkflowsCreate(requestParameters: PipelinesWorkflowsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow> {
        const response = await this.pipelinesWorkflowsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A workflow view.
     */
    async pipelinesWorkflowsDestroyRaw(requestParameters: PipelinesWorkflowsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesWorkflowsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/workflows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A workflow view.
     */
    async pipelinesWorkflowsDestroy(requestParameters: PipelinesWorkflowsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pipelinesWorkflowsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for the collection of all workflows.
     */
    async pipelinesWorkflowsListRaw(requestParameters: PipelinesWorkflowsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedWorkflowList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/workflows/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedWorkflowListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of all workflows.
     */
    async pipelinesWorkflowsList(requestParameters: PipelinesWorkflowsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedWorkflowList> {
        const response = await this.pipelinesWorkflowsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of pipeline-specific workflows.
     */
    async pipelinesWorkflowsList2Raw(requestParameters: PipelinesWorkflowsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedWorkflowList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesWorkflowsList2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/{id}/workflows/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedWorkflowListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of pipeline-specific workflows.
     */
    async pipelinesWorkflowsList2(requestParameters: PipelinesWorkflowsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedWorkflowList> {
        const response = await this.pipelinesWorkflowsList2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of plugin instances that compose the workflow.
     */
    async pipelinesWorkflowsPlugininstancesListRaw(requestParameters: PipelinesWorkflowsPlugininstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPluginInstanceList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesWorkflowsPlugininstancesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/workflows/{id}/plugininstances/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPluginInstanceListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of plugin instances that compose the workflow.
     */
    async pipelinesWorkflowsPlugininstancesList(requestParameters: PipelinesWorkflowsPlugininstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPluginInstanceList> {
        const response = await this.pipelinesWorkflowsPlugininstancesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A workflow view.
     */
    async pipelinesWorkflowsRetrieveRaw(requestParameters: PipelinesWorkflowsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesWorkflowsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/workflows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowFromJSON(jsonValue));
    }

    /**
     * A workflow view.
     */
    async pipelinesWorkflowsRetrieve(requestParameters: PipelinesWorkflowsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow> {
        const response = await this.pipelinesWorkflowsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of workflows resulting from a query search.
     */
    async pipelinesWorkflowsSearchListRaw(requestParameters: PipelinesWorkflowsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedWorkflowList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['ownerUsername'] != null) {
            queryParameters['owner_username'] = requestParameters['ownerUsername'];
        }

        if (requestParameters['pipelineName'] != null) {
            queryParameters['pipeline_name'] = requestParameters['pipelineName'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/workflows/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedWorkflowListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of workflows resulting from a query search.
     */
    async pipelinesWorkflowsSearchList(requestParameters: PipelinesWorkflowsSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedWorkflowList> {
        const response = await this.pipelinesWorkflowsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A workflow view.
     */
    async pipelinesWorkflowsUpdateRaw(requestParameters: PipelinesWorkflowsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipelinesWorkflowsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/pipelines/workflows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowRequestToJSON(requestParameters['workflowRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowFromJSON(jsonValue));
    }

    /**
     * A workflow view.
     */
    async pipelinesWorkflowsUpdate(requestParameters: PipelinesWorkflowsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow> {
        const response = await this.pipelinesWorkflowsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PipelinesBooleanParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesBooleanParameterRetrieveFormatEnum = typeof PipelinesBooleanParameterRetrieveFormatEnum[keyof typeof PipelinesBooleanParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesBooleanParameterUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesBooleanParameterUpdateFormatEnum = typeof PipelinesBooleanParameterUpdateFormatEnum[keyof typeof PipelinesBooleanParameterUpdateFormatEnum];
/**
 * @export
 */
export const PipelinesCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesCreateFormatEnum = typeof PipelinesCreateFormatEnum[keyof typeof PipelinesCreateFormatEnum];
/**
 * @export
 */
export const PipelinesDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesDestroyFormatEnum = typeof PipelinesDestroyFormatEnum[keyof typeof PipelinesDestroyFormatEnum];
/**
 * @export
 */
export const PipelinesFloatParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesFloatParameterRetrieveFormatEnum = typeof PipelinesFloatParameterRetrieveFormatEnum[keyof typeof PipelinesFloatParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesFloatParameterUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesFloatParameterUpdateFormatEnum = typeof PipelinesFloatParameterUpdateFormatEnum[keyof typeof PipelinesFloatParameterUpdateFormatEnum];
/**
 * @export
 */
export const PipelinesIntegerParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesIntegerParameterRetrieveFormatEnum = typeof PipelinesIntegerParameterRetrieveFormatEnum[keyof typeof PipelinesIntegerParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesIntegerParameterUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesIntegerParameterUpdateFormatEnum = typeof PipelinesIntegerParameterUpdateFormatEnum[keyof typeof PipelinesIntegerParameterUpdateFormatEnum];
/**
 * @export
 */
export const PipelinesJsonRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesJsonRetrieveFormatEnum = typeof PipelinesJsonRetrieveFormatEnum[keyof typeof PipelinesJsonRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesListFormatEnum = typeof PipelinesListFormatEnum[keyof typeof PipelinesListFormatEnum];
/**
 * @export
 */
export const PipelinesParametersListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesParametersListFormatEnum = typeof PipelinesParametersListFormatEnum[keyof typeof PipelinesParametersListFormatEnum];
/**
 * @export
 */
export const PipelinesPipingsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesPipingsListFormatEnum = typeof PipelinesPipingsListFormatEnum[keyof typeof PipelinesPipingsListFormatEnum];
/**
 * @export
 */
export const PipelinesPipingsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesPipingsRetrieveFormatEnum = typeof PipelinesPipingsRetrieveFormatEnum[keyof typeof PipelinesPipingsRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesPluginsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesPluginsListFormatEnum = typeof PipelinesPluginsListFormatEnum[keyof typeof PipelinesPluginsListFormatEnum];
/**
 * @export
 */
export const PipelinesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesRetrieveFormatEnum = typeof PipelinesRetrieveFormatEnum[keyof typeof PipelinesRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesSearchListFormatEnum = typeof PipelinesSearchListFormatEnum[keyof typeof PipelinesSearchListFormatEnum];
/**
 * @export
 */
export const PipelinesSourcefilesCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesSourcefilesCreateFormatEnum = typeof PipelinesSourcefilesCreateFormatEnum[keyof typeof PipelinesSourcefilesCreateFormatEnum];
/**
 * @export
 */
export const PipelinesSourcefilesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesSourcefilesListFormatEnum = typeof PipelinesSourcefilesListFormatEnum[keyof typeof PipelinesSourcefilesListFormatEnum];
/**
 * @export
 */
export const PipelinesSourcefilesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesSourcefilesRetrieveFormatEnum = typeof PipelinesSourcefilesRetrieveFormatEnum[keyof typeof PipelinesSourcefilesRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesSourcefilesSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesSourcefilesSearchListFormatEnum = typeof PipelinesSourcefilesSearchListFormatEnum[keyof typeof PipelinesSourcefilesSearchListFormatEnum];
/**
 * @export
 */
export const PipelinesStringParameterRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesStringParameterRetrieveFormatEnum = typeof PipelinesStringParameterRetrieveFormatEnum[keyof typeof PipelinesStringParameterRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesStringParameterUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesStringParameterUpdateFormatEnum = typeof PipelinesStringParameterUpdateFormatEnum[keyof typeof PipelinesStringParameterUpdateFormatEnum];
/**
 * @export
 */
export const PipelinesUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesUpdateFormatEnum = typeof PipelinesUpdateFormatEnum[keyof typeof PipelinesUpdateFormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsCreateFormatEnum = typeof PipelinesWorkflowsCreateFormatEnum[keyof typeof PipelinesWorkflowsCreateFormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsDestroyFormatEnum = typeof PipelinesWorkflowsDestroyFormatEnum[keyof typeof PipelinesWorkflowsDestroyFormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsListFormatEnum = typeof PipelinesWorkflowsListFormatEnum[keyof typeof PipelinesWorkflowsListFormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsList2FormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsList2FormatEnum = typeof PipelinesWorkflowsList2FormatEnum[keyof typeof PipelinesWorkflowsList2FormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsPlugininstancesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsPlugininstancesListFormatEnum = typeof PipelinesWorkflowsPlugininstancesListFormatEnum[keyof typeof PipelinesWorkflowsPlugininstancesListFormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsRetrieveFormatEnum = typeof PipelinesWorkflowsRetrieveFormatEnum[keyof typeof PipelinesWorkflowsRetrieveFormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsSearchListFormatEnum = typeof PipelinesWorkflowsSearchListFormatEnum[keyof typeof PipelinesWorkflowsSearchListFormatEnum];
/**
 * @export
 */
export const PipelinesWorkflowsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type PipelinesWorkflowsUpdateFormatEnum = typeof PipelinesWorkflowsUpdateFormatEnum[keyof typeof PipelinesWorkflowsUpdateFormatEnum];
