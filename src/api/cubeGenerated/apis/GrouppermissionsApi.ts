/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FeedGroupPermission,
  FeedGroupPermissionRequest,
  PaginatedFeedGroupPermissionList,
} from '../models/index';
import {
    FeedGroupPermissionFromJSON,
    FeedGroupPermissionToJSON,
    FeedGroupPermissionRequestFromJSON,
    FeedGroupPermissionRequestToJSON,
    PaginatedFeedGroupPermissionListFromJSON,
    PaginatedFeedGroupPermissionListToJSON,
} from '../models/index';

export interface GrouppermissionsCreateRequest {
    id: number;
    feedGroupPermissionRequest: FeedGroupPermissionRequest;
    format?: GrouppermissionsCreateFormatEnum;
}

export interface GrouppermissionsDestroyRequest {
    id: number;
    format?: GrouppermissionsDestroyFormatEnum;
}

export interface GrouppermissionsListRequest {
    id: number;
    format?: GrouppermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface GrouppermissionsRetrieveRequest {
    id: number;
    format?: GrouppermissionsRetrieveFormatEnum;
}

export interface GrouppermissionsSearchListRequest {
    id: number;
    format?: GrouppermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

/**
 * GrouppermissionsApi - interface
 * 
 * @export
 * @interface GrouppermissionsApiInterface
 */
export interface GrouppermissionsApiInterface {
    /**
     * A view for a feed\'s collection of group permissions.
     * @param {number} id 
     * @param {FeedGroupPermissionRequest} feedGroupPermissionRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrouppermissionsApiInterface
     */
    grouppermissionsCreateRaw(requestParameters: GrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedGroupPermission>>;

    /**
     * A view for a feed\'s collection of group permissions.
     */
    grouppermissionsCreate(requestParameters: GrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedGroupPermission>;

    /**
     * A view for a feed\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrouppermissionsApiInterface
     */
    grouppermissionsDestroyRaw(requestParameters: GrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a feed\'s group permission.
     */
    grouppermissionsDestroy(requestParameters: GrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a feed\'s collection of group permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrouppermissionsApiInterface
     */
    grouppermissionsListRaw(requestParameters: GrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedGroupPermissionList>>;

    /**
     * A view for a feed\'s collection of group permissions.
     */
    grouppermissionsList(requestParameters: GrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedGroupPermissionList>;

    /**
     * A view for a feed\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrouppermissionsApiInterface
     */
    grouppermissionsRetrieveRaw(requestParameters: GrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedGroupPermission>>;

    /**
     * A view for a feed\'s group permission.
     */
    grouppermissionsRetrieve(requestParameters: GrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedGroupPermission>;

    /**
     * A view for the collection of feed-specific group permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrouppermissionsApiInterface
     */
    grouppermissionsSearchListRaw(requestParameters: GrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedGroupPermissionList>>;

    /**
     * A view for the collection of feed-specific group permissions resulting from a query search.
     */
    grouppermissionsSearchList(requestParameters: GrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedGroupPermissionList>;

}

/**
 * 
 */
export class GrouppermissionsApi extends runtime.BaseAPI implements GrouppermissionsApiInterface {

    /**
     * A view for a feed\'s collection of group permissions.
     */
    async grouppermissionsCreateRaw(requestParameters: GrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling grouppermissionsCreate().'
            );
        }

        if (requestParameters['feedGroupPermissionRequest'] == null) {
            throw new runtime.RequiredError(
                'feedGroupPermissionRequest',
                'Required parameter "feedGroupPermissionRequest" was null or undefined when calling grouppermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedGroupPermissionRequestToJSON(requestParameters['feedGroupPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a feed\'s collection of group permissions.
     */
    async grouppermissionsCreate(requestParameters: GrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedGroupPermission> {
        const response = await this.grouppermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a feed\'s group permission.
     */
    async grouppermissionsDestroyRaw(requestParameters: GrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling grouppermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a feed\'s group permission.
     */
    async grouppermissionsDestroy(requestParameters: GrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.grouppermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a feed\'s collection of group permissions.
     */
    async grouppermissionsListRaw(requestParameters: GrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling grouppermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeedGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a feed\'s collection of group permissions.
     */
    async grouppermissionsList(requestParameters: GrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedGroupPermissionList> {
        const response = await this.grouppermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a feed\'s group permission.
     */
    async grouppermissionsRetrieveRaw(requestParameters: GrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling grouppermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a feed\'s group permission.
     */
    async grouppermissionsRetrieve(requestParameters: GrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedGroupPermission> {
        const response = await this.grouppermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of feed-specific group permissions resulting from a query search.
     */
    async grouppermissionsSearchListRaw(requestParameters: GrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling grouppermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/{id}/grouppermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeedGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of feed-specific group permissions resulting from a query search.
     */
    async grouppermissionsSearchList(requestParameters: GrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedGroupPermissionList> {
        const response = await this.grouppermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GrouppermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GrouppermissionsCreateFormatEnum = typeof GrouppermissionsCreateFormatEnum[keyof typeof GrouppermissionsCreateFormatEnum];
/**
 * @export
 */
export const GrouppermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GrouppermissionsDestroyFormatEnum = typeof GrouppermissionsDestroyFormatEnum[keyof typeof GrouppermissionsDestroyFormatEnum];
/**
 * @export
 */
export const GrouppermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GrouppermissionsListFormatEnum = typeof GrouppermissionsListFormatEnum[keyof typeof GrouppermissionsListFormatEnum];
/**
 * @export
 */
export const GrouppermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GrouppermissionsRetrieveFormatEnum = typeof GrouppermissionsRetrieveFormatEnum[keyof typeof GrouppermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const GrouppermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GrouppermissionsSearchListFormatEnum = typeof GrouppermissionsSearchListFormatEnum[keyof typeof GrouppermissionsSearchListFormatEnum];
