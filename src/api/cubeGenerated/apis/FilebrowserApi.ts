/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileBrowserFile,
  FileBrowserFileGroupPermission,
  FileBrowserFileGroupPermissionRequest,
  FileBrowserFileRequest,
  FileBrowserFileUserPermission,
  FileBrowserFileUserPermissionRequest,
  FileBrowserFolder,
  FileBrowserFolderGroupPermission,
  FileBrowserFolderGroupPermissionRequest,
  FileBrowserFolderRequest,
  FileBrowserFolderUserPermission,
  FileBrowserFolderUserPermissionRequest,
  FileBrowserLinkFile,
  FileBrowserLinkFileGroupPermission,
  FileBrowserLinkFileGroupPermissionRequest,
  FileBrowserLinkFileRequest,
  FileBrowserLinkFileUserPermission,
  FileBrowserLinkFileUserPermissionRequest,
  PaginatedFileBrowserFileGroupPermissionList,
  PaginatedFileBrowserFileList,
  PaginatedFileBrowserFileUserPermissionList,
  PaginatedFileBrowserFolderGroupPermissionList,
  PaginatedFileBrowserFolderList,
  PaginatedFileBrowserFolderUserPermissionList,
  PaginatedFileBrowserLinkFileGroupPermissionList,
  PaginatedFileBrowserLinkFileList,
  PaginatedFileBrowserLinkFileUserPermissionList,
} from '../models/index';
import {
    FileBrowserFileFromJSON,
    FileBrowserFileToJSON,
    FileBrowserFileGroupPermissionFromJSON,
    FileBrowserFileGroupPermissionToJSON,
    FileBrowserFileGroupPermissionRequestFromJSON,
    FileBrowserFileGroupPermissionRequestToJSON,
    FileBrowserFileRequestFromJSON,
    FileBrowserFileRequestToJSON,
    FileBrowserFileUserPermissionFromJSON,
    FileBrowserFileUserPermissionToJSON,
    FileBrowserFileUserPermissionRequestFromJSON,
    FileBrowserFileUserPermissionRequestToJSON,
    FileBrowserFolderFromJSON,
    FileBrowserFolderToJSON,
    FileBrowserFolderGroupPermissionFromJSON,
    FileBrowserFolderGroupPermissionToJSON,
    FileBrowserFolderGroupPermissionRequestFromJSON,
    FileBrowserFolderGroupPermissionRequestToJSON,
    FileBrowserFolderRequestFromJSON,
    FileBrowserFolderRequestToJSON,
    FileBrowserFolderUserPermissionFromJSON,
    FileBrowserFolderUserPermissionToJSON,
    FileBrowserFolderUserPermissionRequestFromJSON,
    FileBrowserFolderUserPermissionRequestToJSON,
    FileBrowserLinkFileFromJSON,
    FileBrowserLinkFileToJSON,
    FileBrowserLinkFileGroupPermissionFromJSON,
    FileBrowserLinkFileGroupPermissionToJSON,
    FileBrowserLinkFileGroupPermissionRequestFromJSON,
    FileBrowserLinkFileGroupPermissionRequestToJSON,
    FileBrowserLinkFileRequestFromJSON,
    FileBrowserLinkFileRequestToJSON,
    FileBrowserLinkFileUserPermissionFromJSON,
    FileBrowserLinkFileUserPermissionToJSON,
    FileBrowserLinkFileUserPermissionRequestFromJSON,
    FileBrowserLinkFileUserPermissionRequestToJSON,
    PaginatedFileBrowserFileGroupPermissionListFromJSON,
    PaginatedFileBrowserFileGroupPermissionListToJSON,
    PaginatedFileBrowserFileListFromJSON,
    PaginatedFileBrowserFileListToJSON,
    PaginatedFileBrowserFileUserPermissionListFromJSON,
    PaginatedFileBrowserFileUserPermissionListToJSON,
    PaginatedFileBrowserFolderGroupPermissionListFromJSON,
    PaginatedFileBrowserFolderGroupPermissionListToJSON,
    PaginatedFileBrowserFolderListFromJSON,
    PaginatedFileBrowserFolderListToJSON,
    PaginatedFileBrowserFolderUserPermissionListFromJSON,
    PaginatedFileBrowserFolderUserPermissionListToJSON,
    PaginatedFileBrowserLinkFileGroupPermissionListFromJSON,
    PaginatedFileBrowserLinkFileGroupPermissionListToJSON,
    PaginatedFileBrowserLinkFileListFromJSON,
    PaginatedFileBrowserLinkFileListToJSON,
    PaginatedFileBrowserLinkFileUserPermissionListFromJSON,
    PaginatedFileBrowserLinkFileUserPermissionListToJSON,
} from '../models/index';

export interface FilebrowserChildrenListRequest {
    id: number;
    format?: FilebrowserChildrenListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserCreateRequest {
    format?: FilebrowserCreateFormatEnum;
    fileBrowserFolderRequest?: FileBrowserFolderRequest;
}

export interface FilebrowserDestroyRequest {
    id: number;
    format?: FilebrowserDestroyFormatEnum;
}

export interface FilebrowserFilesDestroyRequest {
    id: number;
    format?: FilebrowserFilesDestroyFormatEnum;
}

export interface FilebrowserFilesGrouppermissionsCreateRequest {
    id: number;
    format?: FilebrowserFilesGrouppermissionsCreateFormatEnum;
    fileBrowserFileGroupPermissionRequest?: FileBrowserFileGroupPermissionRequest;
}

export interface FilebrowserFilesGrouppermissionsDestroyRequest {
    id: number;
    format?: FilebrowserFilesGrouppermissionsDestroyFormatEnum;
}

export interface FilebrowserFilesGrouppermissionsListRequest {
    id: number;
    format?: FilebrowserFilesGrouppermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserFilesGrouppermissionsRetrieveRequest {
    id: number;
    format?: FilebrowserFilesGrouppermissionsRetrieveFormatEnum;
}

export interface FilebrowserFilesGrouppermissionsSearchListRequest {
    id: number;
    format?: FilebrowserFilesGrouppermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserFilesGrouppermissionsUpdateRequest {
    id: number;
    format?: FilebrowserFilesGrouppermissionsUpdateFormatEnum;
    fileBrowserFileGroupPermissionRequest?: FileBrowserFileGroupPermissionRequest;
}

export interface FilebrowserFilesListRequest {
    id: number;
    format?: FilebrowserFilesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserFilesRetrieveRequest {
    id: number;
    format?: FilebrowserFilesRetrieveFormatEnum;
}

export interface FilebrowserFilesRetrieve0Request {
    id: string;
}

export interface FilebrowserFilesUpdateRequest {
    id: number;
    format?: FilebrowserFilesUpdateFormatEnum;
    fileBrowserFileRequest?: FileBrowserFileRequest;
}

export interface FilebrowserFilesUserpermissionsCreateRequest {
    id: number;
    format?: FilebrowserFilesUserpermissionsCreateFormatEnum;
    fileBrowserFileUserPermissionRequest?: FileBrowserFileUserPermissionRequest;
}

export interface FilebrowserFilesUserpermissionsDestroyRequest {
    id: number;
    format?: FilebrowserFilesUserpermissionsDestroyFormatEnum;
}

export interface FilebrowserFilesUserpermissionsListRequest {
    id: number;
    format?: FilebrowserFilesUserpermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserFilesUserpermissionsRetrieveRequest {
    id: number;
    format?: FilebrowserFilesUserpermissionsRetrieveFormatEnum;
}

export interface FilebrowserFilesUserpermissionsSearchListRequest {
    id: number;
    format?: FilebrowserFilesUserpermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserFilesUserpermissionsUpdateRequest {
    id: number;
    format?: FilebrowserFilesUserpermissionsUpdateFormatEnum;
    fileBrowserFileUserPermissionRequest?: FileBrowserFileUserPermissionRequest;
}

export interface FilebrowserGrouppermissionsCreateRequest {
    id: number;
    format?: FilebrowserGrouppermissionsCreateFormatEnum;
    fileBrowserFolderGroupPermissionRequest?: FileBrowserFolderGroupPermissionRequest;
}

export interface FilebrowserGrouppermissionsDestroyRequest {
    id: number;
    format?: FilebrowserGrouppermissionsDestroyFormatEnum;
}

export interface FilebrowserGrouppermissionsListRequest {
    id: number;
    format?: FilebrowserGrouppermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserGrouppermissionsRetrieveRequest {
    id: number;
    format?: FilebrowserGrouppermissionsRetrieveFormatEnum;
}

export interface FilebrowserGrouppermissionsSearchListRequest {
    id: number;
    format?: FilebrowserGrouppermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserGrouppermissionsUpdateRequest {
    id: number;
    format?: FilebrowserGrouppermissionsUpdateFormatEnum;
    fileBrowserFolderGroupPermissionRequest?: FileBrowserFolderGroupPermissionRequest;
}

export interface FilebrowserLinkfilesDestroyRequest {
    id: number;
    format?: FilebrowserLinkfilesDestroyFormatEnum;
}

export interface FilebrowserLinkfilesGrouppermissionsCreateRequest {
    id: number;
    format?: FilebrowserLinkfilesGrouppermissionsCreateFormatEnum;
    fileBrowserLinkFileGroupPermissionRequest?: FileBrowserLinkFileGroupPermissionRequest;
}

export interface FilebrowserLinkfilesGrouppermissionsDestroyRequest {
    id: number;
    format?: FilebrowserLinkfilesGrouppermissionsDestroyFormatEnum;
}

export interface FilebrowserLinkfilesGrouppermissionsListRequest {
    id: number;
    format?: FilebrowserLinkfilesGrouppermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserLinkfilesGrouppermissionsRetrieveRequest {
    id: number;
    format?: FilebrowserLinkfilesGrouppermissionsRetrieveFormatEnum;
}

export interface FilebrowserLinkfilesGrouppermissionsSearchListRequest {
    id: number;
    format?: FilebrowserLinkfilesGrouppermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserLinkfilesGrouppermissionsUpdateRequest {
    id: number;
    format?: FilebrowserLinkfilesGrouppermissionsUpdateFormatEnum;
    fileBrowserLinkFileGroupPermissionRequest?: FileBrowserLinkFileGroupPermissionRequest;
}

export interface FilebrowserLinkfilesListRequest {
    id: number;
    format?: FilebrowserLinkfilesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserLinkfilesRetrieveRequest {
    id: number;
    format?: FilebrowserLinkfilesRetrieveFormatEnum;
}

export interface FilebrowserLinkfilesRetrieve0Request {
    id: string;
}

export interface FilebrowserLinkfilesUpdateRequest {
    id: number;
    format?: FilebrowserLinkfilesUpdateFormatEnum;
    fileBrowserLinkFileRequest?: FileBrowserLinkFileRequest;
}

export interface FilebrowserLinkfilesUserpermissionsCreateRequest {
    id: number;
    format?: FilebrowserLinkfilesUserpermissionsCreateFormatEnum;
    fileBrowserLinkFileUserPermissionRequest?: FileBrowserLinkFileUserPermissionRequest;
}

export interface FilebrowserLinkfilesUserpermissionsDestroyRequest {
    id: number;
    format?: FilebrowserLinkfilesUserpermissionsDestroyFormatEnum;
}

export interface FilebrowserLinkfilesUserpermissionsListRequest {
    id: number;
    format?: FilebrowserLinkfilesUserpermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserLinkfilesUserpermissionsRetrieveRequest {
    id: number;
    format?: FilebrowserLinkfilesUserpermissionsRetrieveFormatEnum;
}

export interface FilebrowserLinkfilesUserpermissionsSearchListRequest {
    id: number;
    format?: FilebrowserLinkfilesUserpermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserLinkfilesUserpermissionsUpdateRequest {
    id: number;
    format?: FilebrowserLinkfilesUserpermissionsUpdateFormatEnum;
    fileBrowserLinkFileUserPermissionRequest?: FileBrowserLinkFileUserPermissionRequest;
}

export interface FilebrowserListRequest {
    format?: FilebrowserListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserRetrieveRequest {
    id: number;
    format?: FilebrowserRetrieveFormatEnum;
}

export interface FilebrowserSearchListRequest {
    format?: FilebrowserSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserUpdateRequest {
    id: number;
    format?: FilebrowserUpdateFormatEnum;
    fileBrowserFolderRequest?: FileBrowserFolderRequest;
}

export interface FilebrowserUserpermissionsCreateRequest {
    id: number;
    format?: FilebrowserUserpermissionsCreateFormatEnum;
    fileBrowserFolderUserPermissionRequest?: FileBrowserFolderUserPermissionRequest;
}

export interface FilebrowserUserpermissionsDestroyRequest {
    id: number;
    format?: FilebrowserUserpermissionsDestroyFormatEnum;
}

export interface FilebrowserUserpermissionsListRequest {
    id: number;
    format?: FilebrowserUserpermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserUserpermissionsRetrieveRequest {
    id: number;
    format?: FilebrowserUserpermissionsRetrieveFormatEnum;
}

export interface FilebrowserUserpermissionsSearchListRequest {
    id: number;
    format?: FilebrowserUserpermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface FilebrowserUserpermissionsUpdateRequest {
    id: number;
    format?: FilebrowserUserpermissionsUpdateFormatEnum;
    fileBrowserFolderUserPermissionRequest?: FileBrowserFolderUserPermissionRequest;
}

/**
 * FilebrowserApi - interface
 * 
 * @export
 * @interface FilebrowserApiInterface
 */
export interface FilebrowserApiInterface {
    /**
     * A view for the collection of folders that are the children of this folder.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserChildrenListRaw(requestParameters: FilebrowserChildrenListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderList>>;

    /**
     * A view for the collection of folders that are the children of this folder.
     */
    filebrowserChildrenList(requestParameters: FilebrowserChildrenListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderList>;

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFolderRequest} [fileBrowserFolderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserCreateRaw(requestParameters: FilebrowserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolder>>;

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     */
    filebrowserCreate(requestParameters: FilebrowserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolder>;

    /**
     * A ChRIS folder view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserDestroyRaw(requestParameters: FilebrowserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A ChRIS folder view.
     */
    filebrowserDestroy(requestParameters: FilebrowserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A ChRIS file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesDestroyRaw(requestParameters: FilebrowserFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A ChRIS file view.
     */
    filebrowserFilesDestroy(requestParameters: FilebrowserFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a file\'s collection of group permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFileGroupPermissionRequest} [fileBrowserFileGroupPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesGrouppermissionsCreateRaw(requestParameters: FilebrowserFilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileGroupPermission>>;

    /**
     * A view for a file\'s collection of group permissions.
     */
    filebrowserFilesGrouppermissionsCreate(requestParameters: FilebrowserFilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileGroupPermission>;

    /**
     * A view for a file\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesGrouppermissionsDestroyRaw(requestParameters: FilebrowserFilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a file\'s group permission.
     */
    filebrowserFilesGrouppermissionsDestroy(requestParameters: FilebrowserFilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a file\'s collection of group permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesGrouppermissionsListRaw(requestParameters: FilebrowserFilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileGroupPermissionList>>;

    /**
     * A view for a file\'s collection of group permissions.
     */
    filebrowserFilesGrouppermissionsList(requestParameters: FilebrowserFilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileGroupPermissionList>;

    /**
     * A view for a file\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesGrouppermissionsRetrieveRaw(requestParameters: FilebrowserFilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileGroupPermission>>;

    /**
     * A view for a file\'s group permission.
     */
    filebrowserFilesGrouppermissionsRetrieve(requestParameters: FilebrowserFilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileGroupPermission>;

    /**
     * A view for the collection of file-specific group permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesGrouppermissionsSearchListRaw(requestParameters: FilebrowserFilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileGroupPermissionList>>;

    /**
     * A view for the collection of file-specific group permissions resulting from a query search.
     */
    filebrowserFilesGrouppermissionsSearchList(requestParameters: FilebrowserFilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileGroupPermissionList>;

    /**
     * A view for a file\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFileGroupPermissionRequest} [fileBrowserFileGroupPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesGrouppermissionsUpdateRaw(requestParameters: FilebrowserFilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileGroupPermission>>;

    /**
     * A view for a file\'s group permission.
     */
    filebrowserFilesGrouppermissionsUpdate(requestParameters: FilebrowserFilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileGroupPermission>;

    /**
     * A view for the collection of all the files directly under this folder.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesListRaw(requestParameters: FilebrowserFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileList>>;

    /**
     * A view for the collection of all the files directly under this folder.
     */
    filebrowserFilesList(requestParameters: FilebrowserFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileList>;

    /**
     * A ChRIS file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesRetrieveRaw(requestParameters: FilebrowserFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFile>>;

    /**
     * A ChRIS file view.
     */
    filebrowserFilesRetrieve(requestParameters: FilebrowserFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFile>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesRetrieve_1Raw(requestParameters: FilebrowserFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    filebrowserFilesRetrieve_1(requestParameters: FilebrowserFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A ChRIS file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFileRequest} [fileBrowserFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesUpdateRaw(requestParameters: FilebrowserFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFile>>;

    /**
     * A ChRIS file view.
     */
    filebrowserFilesUpdate(requestParameters: FilebrowserFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFile>;

    /**
     * A view for a file\'s collection of user permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFileUserPermissionRequest} [fileBrowserFileUserPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesUserpermissionsCreateRaw(requestParameters: FilebrowserFilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileUserPermission>>;

    /**
     * A view for a file\'s collection of user permissions.
     */
    filebrowserFilesUserpermissionsCreate(requestParameters: FilebrowserFilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileUserPermission>;

    /**
     * A view for a file\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesUserpermissionsDestroyRaw(requestParameters: FilebrowserFilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a file\'s user permission.
     */
    filebrowserFilesUserpermissionsDestroy(requestParameters: FilebrowserFilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a file\'s collection of user permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesUserpermissionsListRaw(requestParameters: FilebrowserFilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileUserPermissionList>>;

    /**
     * A view for a file\'s collection of user permissions.
     */
    filebrowserFilesUserpermissionsList(requestParameters: FilebrowserFilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileUserPermissionList>;

    /**
     * A view for a file\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesUserpermissionsRetrieveRaw(requestParameters: FilebrowserFilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileUserPermission>>;

    /**
     * A view for a file\'s user permission.
     */
    filebrowserFilesUserpermissionsRetrieve(requestParameters: FilebrowserFilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileUserPermission>;

    /**
     * A view for the collection of file-specific user permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesUserpermissionsSearchListRaw(requestParameters: FilebrowserFilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileUserPermissionList>>;

    /**
     * A view for the collection of file-specific user permissions resulting from a query search.
     */
    filebrowserFilesUserpermissionsSearchList(requestParameters: FilebrowserFilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileUserPermissionList>;

    /**
     * A view for a file\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFileUserPermissionRequest} [fileBrowserFileUserPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserFilesUserpermissionsUpdateRaw(requestParameters: FilebrowserFilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileUserPermission>>;

    /**
     * A view for a file\'s user permission.
     */
    filebrowserFilesUserpermissionsUpdate(requestParameters: FilebrowserFilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileUserPermission>;

    /**
     * A view for a folder\'s collection of group permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFolderGroupPermissionRequest} [fileBrowserFolderGroupPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserGrouppermissionsCreateRaw(requestParameters: FilebrowserGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderGroupPermission>>;

    /**
     * A view for a folder\'s collection of group permissions.
     */
    filebrowserGrouppermissionsCreate(requestParameters: FilebrowserGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderGroupPermission>;

    /**
     * A view for a folder\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserGrouppermissionsDestroyRaw(requestParameters: FilebrowserGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a folder\'s group permission.
     */
    filebrowserGrouppermissionsDestroy(requestParameters: FilebrowserGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a folder\'s collection of group permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserGrouppermissionsListRaw(requestParameters: FilebrowserGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderGroupPermissionList>>;

    /**
     * A view for a folder\'s collection of group permissions.
     */
    filebrowserGrouppermissionsList(requestParameters: FilebrowserGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderGroupPermissionList>;

    /**
     * A view for a folder\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserGrouppermissionsRetrieveRaw(requestParameters: FilebrowserGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderGroupPermission>>;

    /**
     * A view for a folder\'s group permission.
     */
    filebrowserGrouppermissionsRetrieve(requestParameters: FilebrowserGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderGroupPermission>;

    /**
     * A view for the collection of folder-specific group permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserGrouppermissionsSearchListRaw(requestParameters: FilebrowserGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderGroupPermissionList>>;

    /**
     * A view for the collection of folder-specific group permissions resulting from a query search.
     */
    filebrowserGrouppermissionsSearchList(requestParameters: FilebrowserGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderGroupPermissionList>;

    /**
     * A view for a folder\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFolderGroupPermissionRequest} [fileBrowserFolderGroupPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserGrouppermissionsUpdateRaw(requestParameters: FilebrowserGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderGroupPermission>>;

    /**
     * A view for a folder\'s group permission.
     */
    filebrowserGrouppermissionsUpdate(requestParameters: FilebrowserGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderGroupPermission>;

    /**
     * A ChRIS link file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesDestroyRaw(requestParameters: FilebrowserLinkfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A ChRIS link file view.
     */
    filebrowserLinkfilesDestroy(requestParameters: FilebrowserLinkfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a link file\'s collection of group permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserLinkFileGroupPermissionRequest} [fileBrowserLinkFileGroupPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesGrouppermissionsCreateRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileGroupPermission>>;

    /**
     * A view for a link file\'s collection of group permissions.
     */
    filebrowserLinkfilesGrouppermissionsCreate(requestParameters: FilebrowserLinkfilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileGroupPermission>;

    /**
     * A view for a link file\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesGrouppermissionsDestroyRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a link file\'s group permission.
     */
    filebrowserLinkfilesGrouppermissionsDestroy(requestParameters: FilebrowserLinkfilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a link file\'s collection of group permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesGrouppermissionsListRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileGroupPermissionList>>;

    /**
     * A view for a link file\'s collection of group permissions.
     */
    filebrowserLinkfilesGrouppermissionsList(requestParameters: FilebrowserLinkfilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileGroupPermissionList>;

    /**
     * A view for a link file\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesGrouppermissionsRetrieveRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileGroupPermission>>;

    /**
     * A view for a link file\'s group permission.
     */
    filebrowserLinkfilesGrouppermissionsRetrieve(requestParameters: FilebrowserLinkfilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileGroupPermission>;

    /**
     * A view for the collection of link file-specific group permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesGrouppermissionsSearchListRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileGroupPermissionList>>;

    /**
     * A view for the collection of link file-specific group permissions resulting from a query search.
     */
    filebrowserLinkfilesGrouppermissionsSearchList(requestParameters: FilebrowserLinkfilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileGroupPermissionList>;

    /**
     * A view for a link file\'s group permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserLinkFileGroupPermissionRequest} [fileBrowserLinkFileGroupPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesGrouppermissionsUpdateRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileGroupPermission>>;

    /**
     * A view for a link file\'s group permission.
     */
    filebrowserLinkfilesGrouppermissionsUpdate(requestParameters: FilebrowserLinkfilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileGroupPermission>;

    /**
     * A view for the collection of all the ChRIS link files directly under this folder.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesListRaw(requestParameters: FilebrowserLinkfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileList>>;

    /**
     * A view for the collection of all the ChRIS link files directly under this folder.
     */
    filebrowserLinkfilesList(requestParameters: FilebrowserLinkfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileList>;

    /**
     * A ChRIS link file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesRetrieveRaw(requestParameters: FilebrowserLinkfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFile>>;

    /**
     * A ChRIS link file view.
     */
    filebrowserLinkfilesRetrieve(requestParameters: FilebrowserLinkfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFile>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesRetrieve_2Raw(requestParameters: FilebrowserLinkfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    filebrowserLinkfilesRetrieve_2(requestParameters: FilebrowserLinkfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A ChRIS link file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserLinkFileRequest} [fileBrowserLinkFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesUpdateRaw(requestParameters: FilebrowserLinkfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFile>>;

    /**
     * A ChRIS link file view.
     */
    filebrowserLinkfilesUpdate(requestParameters: FilebrowserLinkfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFile>;

    /**
     * A view for a link file\'s collection of user permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserLinkFileUserPermissionRequest} [fileBrowserLinkFileUserPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesUserpermissionsCreateRaw(requestParameters: FilebrowserLinkfilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileUserPermission>>;

    /**
     * A view for a link file\'s collection of user permissions.
     */
    filebrowserLinkfilesUserpermissionsCreate(requestParameters: FilebrowserLinkfilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileUserPermission>;

    /**
     * A view for a link file\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesUserpermissionsDestroyRaw(requestParameters: FilebrowserLinkfilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a link file\'s user permission.
     */
    filebrowserLinkfilesUserpermissionsDestroy(requestParameters: FilebrowserLinkfilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a link file\'s collection of user permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesUserpermissionsListRaw(requestParameters: FilebrowserLinkfilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileUserPermissionList>>;

    /**
     * A view for a link file\'s collection of user permissions.
     */
    filebrowserLinkfilesUserpermissionsList(requestParameters: FilebrowserLinkfilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileUserPermissionList>;

    /**
     * A view for a link file\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesUserpermissionsRetrieveRaw(requestParameters: FilebrowserLinkfilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileUserPermission>>;

    /**
     * A view for a link file\'s user permission.
     */
    filebrowserLinkfilesUserpermissionsRetrieve(requestParameters: FilebrowserLinkfilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileUserPermission>;

    /**
     * A view for the collection of link file-specific user permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesUserpermissionsSearchListRaw(requestParameters: FilebrowserLinkfilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileUserPermissionList>>;

    /**
     * A view for the collection of link file-specific user permissions resulting from a query search.
     */
    filebrowserLinkfilesUserpermissionsSearchList(requestParameters: FilebrowserLinkfilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileUserPermissionList>;

    /**
     * A view for a link file\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserLinkFileUserPermissionRequest} [fileBrowserLinkFileUserPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserLinkfilesUserpermissionsUpdateRaw(requestParameters: FilebrowserLinkfilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileUserPermission>>;

    /**
     * A view for a link file\'s user permission.
     */
    filebrowserLinkfilesUserpermissionsUpdate(requestParameters: FilebrowserLinkfilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileUserPermission>;

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserListRaw(requestParameters: FilebrowserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderList>>;

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     */
    filebrowserList(requestParameters: FilebrowserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderList>;

    /**
     * A ChRIS folder view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserRetrieveRaw(requestParameters: FilebrowserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolder>>;

    /**
     * A ChRIS folder view.
     */
    filebrowserRetrieve(requestParameters: FilebrowserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolder>;

    /**
     * A view for the collection of file browser folders resulting from a query search. The returned collection only has at most one element.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserSearchListRaw(requestParameters: FilebrowserSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderList>>;

    /**
     * A view for the collection of file browser folders resulting from a query search. The returned collection only has at most one element.
     */
    filebrowserSearchList(requestParameters: FilebrowserSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderList>;

    /**
     * A ChRIS folder view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFolderRequest} [fileBrowserFolderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserUpdateRaw(requestParameters: FilebrowserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolder>>;

    /**
     * A ChRIS folder view.
     */
    filebrowserUpdate(requestParameters: FilebrowserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolder>;

    /**
     * A view for a folder\'s collection of user permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFolderUserPermissionRequest} [fileBrowserFolderUserPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserUserpermissionsCreateRaw(requestParameters: FilebrowserUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderUserPermission>>;

    /**
     * A view for a folder\'s collection of user permissions.
     */
    filebrowserUserpermissionsCreate(requestParameters: FilebrowserUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderUserPermission>;

    /**
     * A view for a folder\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserUserpermissionsDestroyRaw(requestParameters: FilebrowserUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a folder\'s user permission.
     */
    filebrowserUserpermissionsDestroy(requestParameters: FilebrowserUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a folder\'s collection of user permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserUserpermissionsListRaw(requestParameters: FilebrowserUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderUserPermissionList>>;

    /**
     * A view for a folder\'s collection of user permissions.
     */
    filebrowserUserpermissionsList(requestParameters: FilebrowserUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderUserPermissionList>;

    /**
     * A view for a folder\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserUserpermissionsRetrieveRaw(requestParameters: FilebrowserUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderUserPermission>>;

    /**
     * A view for a folder\'s user permission.
     */
    filebrowserUserpermissionsRetrieve(requestParameters: FilebrowserUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderUserPermission>;

    /**
     * A view for the collection of folder-specific user permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserUserpermissionsSearchListRaw(requestParameters: FilebrowserUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderUserPermissionList>>;

    /**
     * A view for the collection of folder-specific user permissions resulting from a query search.
     */
    filebrowserUserpermissionsSearchList(requestParameters: FilebrowserUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderUserPermissionList>;

    /**
     * A view for a folder\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {FileBrowserFolderUserPermissionRequest} [fileBrowserFolderUserPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilebrowserApiInterface
     */
    filebrowserUserpermissionsUpdateRaw(requestParameters: FilebrowserUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderUserPermission>>;

    /**
     * A view for a folder\'s user permission.
     */
    filebrowserUserpermissionsUpdate(requestParameters: FilebrowserUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderUserPermission>;

}

/**
 * 
 */
export class FilebrowserApi extends runtime.BaseAPI implements FilebrowserApiInterface {

    /**
     * A view for the collection of folders that are the children of this folder.
     */
    async filebrowserChildrenListRaw(requestParameters: FilebrowserChildrenListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserChildrenList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/children/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFolderListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of folders that are the children of this folder.
     */
    async filebrowserChildrenList(requestParameters: FilebrowserChildrenListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderList> {
        const response = await this.filebrowserChildrenListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     */
    async filebrowserCreateRaw(requestParameters: FilebrowserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolder>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFolderRequestToJSON(requestParameters['fileBrowserFolderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderFromJSON(jsonValue));
    }

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     */
    async filebrowserCreate(requestParameters: FilebrowserCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolder> {
        const response = await this.filebrowserCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A ChRIS folder view.
     */
    async filebrowserDestroyRaw(requestParameters: FilebrowserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A ChRIS folder view.
     */
    async filebrowserDestroy(requestParameters: FilebrowserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A ChRIS file view.
     */
    async filebrowserFilesDestroyRaw(requestParameters: FilebrowserFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A ChRIS file view.
     */
    async filebrowserFilesDestroy(requestParameters: FilebrowserFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserFilesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a file\'s collection of group permissions.
     */
    async filebrowserFilesGrouppermissionsCreateRaw(requestParameters: FilebrowserFilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesGrouppermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFileGroupPermissionRequestToJSON(requestParameters['fileBrowserFileGroupPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s collection of group permissions.
     */
    async filebrowserFilesGrouppermissionsCreate(requestParameters: FilebrowserFilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileGroupPermission> {
        const response = await this.filebrowserFilesGrouppermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a file\'s group permission.
     */
    async filebrowserFilesGrouppermissionsDestroyRaw(requestParameters: FilebrowserFilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesGrouppermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a file\'s group permission.
     */
    async filebrowserFilesGrouppermissionsDestroy(requestParameters: FilebrowserFilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserFilesGrouppermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a file\'s collection of group permissions.
     */
    async filebrowserFilesGrouppermissionsListRaw(requestParameters: FilebrowserFilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesGrouppermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFileGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s collection of group permissions.
     */
    async filebrowserFilesGrouppermissionsList(requestParameters: FilebrowserFilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileGroupPermissionList> {
        const response = await this.filebrowserFilesGrouppermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a file\'s group permission.
     */
    async filebrowserFilesGrouppermissionsRetrieveRaw(requestParameters: FilebrowserFilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesGrouppermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s group permission.
     */
    async filebrowserFilesGrouppermissionsRetrieve(requestParameters: FilebrowserFilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileGroupPermission> {
        const response = await this.filebrowserFilesGrouppermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of file-specific group permissions resulting from a query search.
     */
    async filebrowserFilesGrouppermissionsSearchListRaw(requestParameters: FilebrowserFilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesGrouppermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/grouppermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFileGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of file-specific group permissions resulting from a query search.
     */
    async filebrowserFilesGrouppermissionsSearchList(requestParameters: FilebrowserFilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileGroupPermissionList> {
        const response = await this.filebrowserFilesGrouppermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a file\'s group permission.
     */
    async filebrowserFilesGrouppermissionsUpdateRaw(requestParameters: FilebrowserFilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesGrouppermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFileGroupPermissionRequestToJSON(requestParameters['fileBrowserFileGroupPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s group permission.
     */
    async filebrowserFilesGrouppermissionsUpdate(requestParameters: FilebrowserFilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileGroupPermission> {
        const response = await this.filebrowserFilesGrouppermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of all the files directly under this folder.
     */
    async filebrowserFilesListRaw(requestParameters: FilebrowserFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/files/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of all the files directly under this folder.
     */
    async filebrowserFilesList(requestParameters: FilebrowserFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileList> {
        const response = await this.filebrowserFilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A ChRIS file view.
     */
    async filebrowserFilesRetrieveRaw(requestParameters: FilebrowserFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileFromJSON(jsonValue));
    }

    /**
     * A ChRIS file view.
     */
    async filebrowserFilesRetrieve(requestParameters: FilebrowserFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFile> {
        const response = await this.filebrowserFilesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async filebrowserFilesRetrieve_1Raw(requestParameters: FilebrowserFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesRetrieve_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/.`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async filebrowserFilesRetrieve_1(requestParameters: FilebrowserFilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserFilesRetrieve_1Raw(requestParameters, initOverrides);
    }

    /**
     * A ChRIS file view.
     */
    async filebrowserFilesUpdateRaw(requestParameters: FilebrowserFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFileRequestToJSON(requestParameters['fileBrowserFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileFromJSON(jsonValue));
    }

    /**
     * A ChRIS file view.
     */
    async filebrowserFilesUpdate(requestParameters: FilebrowserFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFile> {
        const response = await this.filebrowserFilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a file\'s collection of user permissions.
     */
    async filebrowserFilesUserpermissionsCreateRaw(requestParameters: FilebrowserFilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesUserpermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFileUserPermissionRequestToJSON(requestParameters['fileBrowserFileUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s collection of user permissions.
     */
    async filebrowserFilesUserpermissionsCreate(requestParameters: FilebrowserFilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileUserPermission> {
        const response = await this.filebrowserFilesUserpermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a file\'s user permission.
     */
    async filebrowserFilesUserpermissionsDestroyRaw(requestParameters: FilebrowserFilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesUserpermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a file\'s user permission.
     */
    async filebrowserFilesUserpermissionsDestroy(requestParameters: FilebrowserFilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserFilesUserpermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a file\'s collection of user permissions.
     */
    async filebrowserFilesUserpermissionsListRaw(requestParameters: FilebrowserFilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesUserpermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFileUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s collection of user permissions.
     */
    async filebrowserFilesUserpermissionsList(requestParameters: FilebrowserFilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileUserPermissionList> {
        const response = await this.filebrowserFilesUserpermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a file\'s user permission.
     */
    async filebrowserFilesUserpermissionsRetrieveRaw(requestParameters: FilebrowserFilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesUserpermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s user permission.
     */
    async filebrowserFilesUserpermissionsRetrieve(requestParameters: FilebrowserFilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileUserPermission> {
        const response = await this.filebrowserFilesUserpermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of file-specific user permissions resulting from a query search.
     */
    async filebrowserFilesUserpermissionsSearchListRaw(requestParameters: FilebrowserFilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFileUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesUserpermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/{id}/userpermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFileUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of file-specific user permissions resulting from a query search.
     */
    async filebrowserFilesUserpermissionsSearchList(requestParameters: FilebrowserFilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFileUserPermissionList> {
        const response = await this.filebrowserFilesUserpermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a file\'s user permission.
     */
    async filebrowserFilesUserpermissionsUpdateRaw(requestParameters: FilebrowserFilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFileUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserFilesUserpermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/files/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFileUserPermissionRequestToJSON(requestParameters['fileBrowserFileUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFileUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a file\'s user permission.
     */
    async filebrowserFilesUserpermissionsUpdate(requestParameters: FilebrowserFilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFileUserPermission> {
        const response = await this.filebrowserFilesUserpermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s collection of group permissions.
     */
    async filebrowserGrouppermissionsCreateRaw(requestParameters: FilebrowserGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserGrouppermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFolderGroupPermissionRequestToJSON(requestParameters['fileBrowserFolderGroupPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s collection of group permissions.
     */
    async filebrowserGrouppermissionsCreate(requestParameters: FilebrowserGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderGroupPermission> {
        const response = await this.filebrowserGrouppermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s group permission.
     */
    async filebrowserGrouppermissionsDestroyRaw(requestParameters: FilebrowserGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserGrouppermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a folder\'s group permission.
     */
    async filebrowserGrouppermissionsDestroy(requestParameters: FilebrowserGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserGrouppermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a folder\'s collection of group permissions.
     */
    async filebrowserGrouppermissionsListRaw(requestParameters: FilebrowserGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserGrouppermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFolderGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s collection of group permissions.
     */
    async filebrowserGrouppermissionsList(requestParameters: FilebrowserGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderGroupPermissionList> {
        const response = await this.filebrowserGrouppermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s group permission.
     */
    async filebrowserGrouppermissionsRetrieveRaw(requestParameters: FilebrowserGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserGrouppermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s group permission.
     */
    async filebrowserGrouppermissionsRetrieve(requestParameters: FilebrowserGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderGroupPermission> {
        const response = await this.filebrowserGrouppermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of folder-specific group permissions resulting from a query search.
     */
    async filebrowserGrouppermissionsSearchListRaw(requestParameters: FilebrowserGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserGrouppermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/grouppermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFolderGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of folder-specific group permissions resulting from a query search.
     */
    async filebrowserGrouppermissionsSearchList(requestParameters: FilebrowserGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderGroupPermissionList> {
        const response = await this.filebrowserGrouppermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s group permission.
     */
    async filebrowserGrouppermissionsUpdateRaw(requestParameters: FilebrowserGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserGrouppermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFolderGroupPermissionRequestToJSON(requestParameters['fileBrowserFolderGroupPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s group permission.
     */
    async filebrowserGrouppermissionsUpdate(requestParameters: FilebrowserGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderGroupPermission> {
        const response = await this.filebrowserGrouppermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A ChRIS link file view.
     */
    async filebrowserLinkfilesDestroyRaw(requestParameters: FilebrowserLinkfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A ChRIS link file view.
     */
    async filebrowserLinkfilesDestroy(requestParameters: FilebrowserLinkfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserLinkfilesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a link file\'s collection of group permissions.
     */
    async filebrowserLinkfilesGrouppermissionsCreateRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesGrouppermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserLinkFileGroupPermissionRequestToJSON(requestParameters['fileBrowserLinkFileGroupPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s collection of group permissions.
     */
    async filebrowserLinkfilesGrouppermissionsCreate(requestParameters: FilebrowserLinkfilesGrouppermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileGroupPermission> {
        const response = await this.filebrowserLinkfilesGrouppermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a link file\'s group permission.
     */
    async filebrowserLinkfilesGrouppermissionsDestroyRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesGrouppermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a link file\'s group permission.
     */
    async filebrowserLinkfilesGrouppermissionsDestroy(requestParameters: FilebrowserLinkfilesGrouppermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserLinkfilesGrouppermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a link file\'s collection of group permissions.
     */
    async filebrowserLinkfilesGrouppermissionsListRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesGrouppermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/grouppermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserLinkFileGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s collection of group permissions.
     */
    async filebrowserLinkfilesGrouppermissionsList(requestParameters: FilebrowserLinkfilesGrouppermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileGroupPermissionList> {
        const response = await this.filebrowserLinkfilesGrouppermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a link file\'s group permission.
     */
    async filebrowserLinkfilesGrouppermissionsRetrieveRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesGrouppermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s group permission.
     */
    async filebrowserLinkfilesGrouppermissionsRetrieve(requestParameters: FilebrowserLinkfilesGrouppermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileGroupPermission> {
        const response = await this.filebrowserLinkfilesGrouppermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of link file-specific group permissions resulting from a query search.
     */
    async filebrowserLinkfilesGrouppermissionsSearchListRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileGroupPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesGrouppermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/grouppermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserLinkFileGroupPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of link file-specific group permissions resulting from a query search.
     */
    async filebrowserLinkfilesGrouppermissionsSearchList(requestParameters: FilebrowserLinkfilesGrouppermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileGroupPermissionList> {
        const response = await this.filebrowserLinkfilesGrouppermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a link file\'s group permission.
     */
    async filebrowserLinkfilesGrouppermissionsUpdateRaw(requestParameters: FilebrowserLinkfilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileGroupPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesGrouppermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/grouppermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserLinkFileGroupPermissionRequestToJSON(requestParameters['fileBrowserLinkFileGroupPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileGroupPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s group permission.
     */
    async filebrowserLinkfilesGrouppermissionsUpdate(requestParameters: FilebrowserLinkfilesGrouppermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileGroupPermission> {
        const response = await this.filebrowserLinkfilesGrouppermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of all the ChRIS link files directly under this folder.
     */
    async filebrowserLinkfilesListRaw(requestParameters: FilebrowserLinkfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/linkfiles/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserLinkFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of all the ChRIS link files directly under this folder.
     */
    async filebrowserLinkfilesList(requestParameters: FilebrowserLinkfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileList> {
        const response = await this.filebrowserLinkfilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A ChRIS link file view.
     */
    async filebrowserLinkfilesRetrieveRaw(requestParameters: FilebrowserLinkfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileFromJSON(jsonValue));
    }

    /**
     * A ChRIS link file view.
     */
    async filebrowserLinkfilesRetrieve(requestParameters: FilebrowserLinkfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFile> {
        const response = await this.filebrowserLinkfilesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async filebrowserLinkfilesRetrieve_2Raw(requestParameters: FilebrowserLinkfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesRetrieve_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/.`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async filebrowserLinkfilesRetrieve_2(requestParameters: FilebrowserLinkfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserLinkfilesRetrieve_2Raw(requestParameters, initOverrides);
    }

    /**
     * A ChRIS link file view.
     */
    async filebrowserLinkfilesUpdateRaw(requestParameters: FilebrowserLinkfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserLinkFileRequestToJSON(requestParameters['fileBrowserLinkFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileFromJSON(jsonValue));
    }

    /**
     * A ChRIS link file view.
     */
    async filebrowserLinkfilesUpdate(requestParameters: FilebrowserLinkfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFile> {
        const response = await this.filebrowserLinkfilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a link file\'s collection of user permissions.
     */
    async filebrowserLinkfilesUserpermissionsCreateRaw(requestParameters: FilebrowserLinkfilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesUserpermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserLinkFileUserPermissionRequestToJSON(requestParameters['fileBrowserLinkFileUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s collection of user permissions.
     */
    async filebrowserLinkfilesUserpermissionsCreate(requestParameters: FilebrowserLinkfilesUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileUserPermission> {
        const response = await this.filebrowserLinkfilesUserpermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a link file\'s user permission.
     */
    async filebrowserLinkfilesUserpermissionsDestroyRaw(requestParameters: FilebrowserLinkfilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesUserpermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a link file\'s user permission.
     */
    async filebrowserLinkfilesUserpermissionsDestroy(requestParameters: FilebrowserLinkfilesUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserLinkfilesUserpermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a link file\'s collection of user permissions.
     */
    async filebrowserLinkfilesUserpermissionsListRaw(requestParameters: FilebrowserLinkfilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesUserpermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserLinkFileUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s collection of user permissions.
     */
    async filebrowserLinkfilesUserpermissionsList(requestParameters: FilebrowserLinkfilesUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileUserPermissionList> {
        const response = await this.filebrowserLinkfilesUserpermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a link file\'s user permission.
     */
    async filebrowserLinkfilesUserpermissionsRetrieveRaw(requestParameters: FilebrowserLinkfilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesUserpermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s user permission.
     */
    async filebrowserLinkfilesUserpermissionsRetrieve(requestParameters: FilebrowserLinkfilesUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileUserPermission> {
        const response = await this.filebrowserLinkfilesUserpermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of link file-specific user permissions resulting from a query search.
     */
    async filebrowserLinkfilesUserpermissionsSearchListRaw(requestParameters: FilebrowserLinkfilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserLinkFileUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesUserpermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/{id}/userpermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserLinkFileUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of link file-specific user permissions resulting from a query search.
     */
    async filebrowserLinkfilesUserpermissionsSearchList(requestParameters: FilebrowserLinkfilesUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserLinkFileUserPermissionList> {
        const response = await this.filebrowserLinkfilesUserpermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a link file\'s user permission.
     */
    async filebrowserLinkfilesUserpermissionsUpdateRaw(requestParameters: FilebrowserLinkfilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserLinkFileUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserLinkfilesUserpermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/linkfiles/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserLinkFileUserPermissionRequestToJSON(requestParameters['fileBrowserLinkFileUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserLinkFileUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a link file\'s user permission.
     */
    async filebrowserLinkfilesUserpermissionsUpdate(requestParameters: FilebrowserLinkfilesUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserLinkFileUserPermission> {
        const response = await this.filebrowserLinkfilesUserpermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     */
    async filebrowserListRaw(requestParameters: FilebrowserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFolderListFromJSON(jsonValue));
    }

    /**
     * A view for the initial page of the collection of file browser folders. The returned collection only has a single element.
     */
    async filebrowserList(requestParameters: FilebrowserListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderList> {
        const response = await this.filebrowserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A ChRIS folder view.
     */
    async filebrowserRetrieveRaw(requestParameters: FilebrowserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderFromJSON(jsonValue));
    }

    /**
     * A ChRIS folder view.
     */
    async filebrowserRetrieve(requestParameters: FilebrowserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolder> {
        const response = await this.filebrowserRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of file browser folders resulting from a query search. The returned collection only has at most one element.
     */
    async filebrowserSearchListRaw(requestParameters: FilebrowserSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFolderListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of file browser folders resulting from a query search. The returned collection only has at most one element.
     */
    async filebrowserSearchList(requestParameters: FilebrowserSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderList> {
        const response = await this.filebrowserSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A ChRIS folder view.
     */
    async filebrowserUpdateRaw(requestParameters: FilebrowserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFolderRequestToJSON(requestParameters['fileBrowserFolderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderFromJSON(jsonValue));
    }

    /**
     * A ChRIS folder view.
     */
    async filebrowserUpdate(requestParameters: FilebrowserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolder> {
        const response = await this.filebrowserUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s collection of user permissions.
     */
    async filebrowserUserpermissionsCreateRaw(requestParameters: FilebrowserUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserUserpermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFolderUserPermissionRequestToJSON(requestParameters['fileBrowserFolderUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s collection of user permissions.
     */
    async filebrowserUserpermissionsCreate(requestParameters: FilebrowserUserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderUserPermission> {
        const response = await this.filebrowserUserpermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s user permission.
     */
    async filebrowserUserpermissionsDestroyRaw(requestParameters: FilebrowserUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserUserpermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a folder\'s user permission.
     */
    async filebrowserUserpermissionsDestroy(requestParameters: FilebrowserUserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.filebrowserUserpermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a folder\'s collection of user permissions.
     */
    async filebrowserUserpermissionsListRaw(requestParameters: FilebrowserUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserUserpermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFolderUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s collection of user permissions.
     */
    async filebrowserUserpermissionsList(requestParameters: FilebrowserUserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderUserPermissionList> {
        const response = await this.filebrowserUserpermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s user permission.
     */
    async filebrowserUserpermissionsRetrieveRaw(requestParameters: FilebrowserUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserUserpermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s user permission.
     */
    async filebrowserUserpermissionsRetrieve(requestParameters: FilebrowserUserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderUserPermission> {
        const response = await this.filebrowserUserpermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of folder-specific user permissions resulting from a query search.
     */
    async filebrowserUserpermissionsSearchListRaw(requestParameters: FilebrowserUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFileBrowserFolderUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserUserpermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/{id}/userpermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFileBrowserFolderUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of folder-specific user permissions resulting from a query search.
     */
    async filebrowserUserpermissionsSearchList(requestParameters: FilebrowserUserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFileBrowserFolderUserPermissionList> {
        const response = await this.filebrowserUserpermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a folder\'s user permission.
     */
    async filebrowserUserpermissionsUpdateRaw(requestParameters: FilebrowserUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileBrowserFolderUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling filebrowserUserpermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.collection+json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/filebrowser/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileBrowserFolderUserPermissionRequestToJSON(requestParameters['fileBrowserFolderUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileBrowserFolderUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a folder\'s user permission.
     */
    async filebrowserUserpermissionsUpdate(requestParameters: FilebrowserUserpermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileBrowserFolderUserPermission> {
        const response = await this.filebrowserUserpermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FilebrowserChildrenListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserChildrenListFormatEnum = typeof FilebrowserChildrenListFormatEnum[keyof typeof FilebrowserChildrenListFormatEnum];
/**
 * @export
 */
export const FilebrowserCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserCreateFormatEnum = typeof FilebrowserCreateFormatEnum[keyof typeof FilebrowserCreateFormatEnum];
/**
 * @export
 */
export const FilebrowserDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserDestroyFormatEnum = typeof FilebrowserDestroyFormatEnum[keyof typeof FilebrowserDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesDestroyFormatEnum = typeof FilebrowserFilesDestroyFormatEnum[keyof typeof FilebrowserFilesDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesGrouppermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesGrouppermissionsCreateFormatEnum = typeof FilebrowserFilesGrouppermissionsCreateFormatEnum[keyof typeof FilebrowserFilesGrouppermissionsCreateFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesGrouppermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesGrouppermissionsDestroyFormatEnum = typeof FilebrowserFilesGrouppermissionsDestroyFormatEnum[keyof typeof FilebrowserFilesGrouppermissionsDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesGrouppermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesGrouppermissionsListFormatEnum = typeof FilebrowserFilesGrouppermissionsListFormatEnum[keyof typeof FilebrowserFilesGrouppermissionsListFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesGrouppermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesGrouppermissionsRetrieveFormatEnum = typeof FilebrowserFilesGrouppermissionsRetrieveFormatEnum[keyof typeof FilebrowserFilesGrouppermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesGrouppermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesGrouppermissionsSearchListFormatEnum = typeof FilebrowserFilesGrouppermissionsSearchListFormatEnum[keyof typeof FilebrowserFilesGrouppermissionsSearchListFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesGrouppermissionsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesGrouppermissionsUpdateFormatEnum = typeof FilebrowserFilesGrouppermissionsUpdateFormatEnum[keyof typeof FilebrowserFilesGrouppermissionsUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesListFormatEnum = typeof FilebrowserFilesListFormatEnum[keyof typeof FilebrowserFilesListFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesRetrieveFormatEnum = typeof FilebrowserFilesRetrieveFormatEnum[keyof typeof FilebrowserFilesRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesUpdateFormatEnum = typeof FilebrowserFilesUpdateFormatEnum[keyof typeof FilebrowserFilesUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesUserpermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesUserpermissionsCreateFormatEnum = typeof FilebrowserFilesUserpermissionsCreateFormatEnum[keyof typeof FilebrowserFilesUserpermissionsCreateFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesUserpermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesUserpermissionsDestroyFormatEnum = typeof FilebrowserFilesUserpermissionsDestroyFormatEnum[keyof typeof FilebrowserFilesUserpermissionsDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesUserpermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesUserpermissionsListFormatEnum = typeof FilebrowserFilesUserpermissionsListFormatEnum[keyof typeof FilebrowserFilesUserpermissionsListFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesUserpermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesUserpermissionsRetrieveFormatEnum = typeof FilebrowserFilesUserpermissionsRetrieveFormatEnum[keyof typeof FilebrowserFilesUserpermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesUserpermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesUserpermissionsSearchListFormatEnum = typeof FilebrowserFilesUserpermissionsSearchListFormatEnum[keyof typeof FilebrowserFilesUserpermissionsSearchListFormatEnum];
/**
 * @export
 */
export const FilebrowserFilesUserpermissionsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserFilesUserpermissionsUpdateFormatEnum = typeof FilebrowserFilesUserpermissionsUpdateFormatEnum[keyof typeof FilebrowserFilesUserpermissionsUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserGrouppermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserGrouppermissionsCreateFormatEnum = typeof FilebrowserGrouppermissionsCreateFormatEnum[keyof typeof FilebrowserGrouppermissionsCreateFormatEnum];
/**
 * @export
 */
export const FilebrowserGrouppermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserGrouppermissionsDestroyFormatEnum = typeof FilebrowserGrouppermissionsDestroyFormatEnum[keyof typeof FilebrowserGrouppermissionsDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserGrouppermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserGrouppermissionsListFormatEnum = typeof FilebrowserGrouppermissionsListFormatEnum[keyof typeof FilebrowserGrouppermissionsListFormatEnum];
/**
 * @export
 */
export const FilebrowserGrouppermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserGrouppermissionsRetrieveFormatEnum = typeof FilebrowserGrouppermissionsRetrieveFormatEnum[keyof typeof FilebrowserGrouppermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserGrouppermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserGrouppermissionsSearchListFormatEnum = typeof FilebrowserGrouppermissionsSearchListFormatEnum[keyof typeof FilebrowserGrouppermissionsSearchListFormatEnum];
/**
 * @export
 */
export const FilebrowserGrouppermissionsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserGrouppermissionsUpdateFormatEnum = typeof FilebrowserGrouppermissionsUpdateFormatEnum[keyof typeof FilebrowserGrouppermissionsUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesDestroyFormatEnum = typeof FilebrowserLinkfilesDestroyFormatEnum[keyof typeof FilebrowserLinkfilesDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesGrouppermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesGrouppermissionsCreateFormatEnum = typeof FilebrowserLinkfilesGrouppermissionsCreateFormatEnum[keyof typeof FilebrowserLinkfilesGrouppermissionsCreateFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesGrouppermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesGrouppermissionsDestroyFormatEnum = typeof FilebrowserLinkfilesGrouppermissionsDestroyFormatEnum[keyof typeof FilebrowserLinkfilesGrouppermissionsDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesGrouppermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesGrouppermissionsListFormatEnum = typeof FilebrowserLinkfilesGrouppermissionsListFormatEnum[keyof typeof FilebrowserLinkfilesGrouppermissionsListFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesGrouppermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesGrouppermissionsRetrieveFormatEnum = typeof FilebrowserLinkfilesGrouppermissionsRetrieveFormatEnum[keyof typeof FilebrowserLinkfilesGrouppermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesGrouppermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesGrouppermissionsSearchListFormatEnum = typeof FilebrowserLinkfilesGrouppermissionsSearchListFormatEnum[keyof typeof FilebrowserLinkfilesGrouppermissionsSearchListFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesGrouppermissionsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesGrouppermissionsUpdateFormatEnum = typeof FilebrowserLinkfilesGrouppermissionsUpdateFormatEnum[keyof typeof FilebrowserLinkfilesGrouppermissionsUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesListFormatEnum = typeof FilebrowserLinkfilesListFormatEnum[keyof typeof FilebrowserLinkfilesListFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesRetrieveFormatEnum = typeof FilebrowserLinkfilesRetrieveFormatEnum[keyof typeof FilebrowserLinkfilesRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesUpdateFormatEnum = typeof FilebrowserLinkfilesUpdateFormatEnum[keyof typeof FilebrowserLinkfilesUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesUserpermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesUserpermissionsCreateFormatEnum = typeof FilebrowserLinkfilesUserpermissionsCreateFormatEnum[keyof typeof FilebrowserLinkfilesUserpermissionsCreateFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesUserpermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesUserpermissionsDestroyFormatEnum = typeof FilebrowserLinkfilesUserpermissionsDestroyFormatEnum[keyof typeof FilebrowserLinkfilesUserpermissionsDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesUserpermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesUserpermissionsListFormatEnum = typeof FilebrowserLinkfilesUserpermissionsListFormatEnum[keyof typeof FilebrowserLinkfilesUserpermissionsListFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesUserpermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesUserpermissionsRetrieveFormatEnum = typeof FilebrowserLinkfilesUserpermissionsRetrieveFormatEnum[keyof typeof FilebrowserLinkfilesUserpermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesUserpermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesUserpermissionsSearchListFormatEnum = typeof FilebrowserLinkfilesUserpermissionsSearchListFormatEnum[keyof typeof FilebrowserLinkfilesUserpermissionsSearchListFormatEnum];
/**
 * @export
 */
export const FilebrowserLinkfilesUserpermissionsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserLinkfilesUserpermissionsUpdateFormatEnum = typeof FilebrowserLinkfilesUserpermissionsUpdateFormatEnum[keyof typeof FilebrowserLinkfilesUserpermissionsUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserListFormatEnum = typeof FilebrowserListFormatEnum[keyof typeof FilebrowserListFormatEnum];
/**
 * @export
 */
export const FilebrowserRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserRetrieveFormatEnum = typeof FilebrowserRetrieveFormatEnum[keyof typeof FilebrowserRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserSearchListFormatEnum = typeof FilebrowserSearchListFormatEnum[keyof typeof FilebrowserSearchListFormatEnum];
/**
 * @export
 */
export const FilebrowserUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserUpdateFormatEnum = typeof FilebrowserUpdateFormatEnum[keyof typeof FilebrowserUpdateFormatEnum];
/**
 * @export
 */
export const FilebrowserUserpermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserUserpermissionsCreateFormatEnum = typeof FilebrowserUserpermissionsCreateFormatEnum[keyof typeof FilebrowserUserpermissionsCreateFormatEnum];
/**
 * @export
 */
export const FilebrowserUserpermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserUserpermissionsDestroyFormatEnum = typeof FilebrowserUserpermissionsDestroyFormatEnum[keyof typeof FilebrowserUserpermissionsDestroyFormatEnum];
/**
 * @export
 */
export const FilebrowserUserpermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserUserpermissionsListFormatEnum = typeof FilebrowserUserpermissionsListFormatEnum[keyof typeof FilebrowserUserpermissionsListFormatEnum];
/**
 * @export
 */
export const FilebrowserUserpermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserUserpermissionsRetrieveFormatEnum = typeof FilebrowserUserpermissionsRetrieveFormatEnum[keyof typeof FilebrowserUserpermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const FilebrowserUserpermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserUserpermissionsSearchListFormatEnum = typeof FilebrowserUserpermissionsSearchListFormatEnum[keyof typeof FilebrowserUserpermissionsSearchListFormatEnum];
/**
 * @export
 */
export const FilebrowserUserpermissionsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type FilebrowserUserpermissionsUpdateFormatEnum = typeof FilebrowserUserpermissionsUpdateFormatEnum[keyof typeof FilebrowserUserpermissionsUpdateFormatEnum];
