/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FeedUserPermission,
  FeedUserPermissionRequest,
  PaginatedFeedUserPermissionList,
} from '../models/index';
import {
    FeedUserPermissionFromJSON,
    FeedUserPermissionToJSON,
    FeedUserPermissionRequestFromJSON,
    FeedUserPermissionRequestToJSON,
    PaginatedFeedUserPermissionListFromJSON,
    PaginatedFeedUserPermissionListToJSON,
} from '../models/index';

export interface UserpermissionsCreateRequest {
    id: number;
    feedUserPermissionRequest: FeedUserPermissionRequest;
    format?: UserpermissionsCreateFormatEnum;
}

export interface UserpermissionsDestroyRequest {
    id: number;
    format?: UserpermissionsDestroyFormatEnum;
}

export interface UserpermissionsListRequest {
    id: number;
    format?: UserpermissionsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface UserpermissionsRetrieveRequest {
    id: number;
    format?: UserpermissionsRetrieveFormatEnum;
}

export interface UserpermissionsSearchListRequest {
    id: number;
    format?: UserpermissionsSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

/**
 * UserpermissionsApi - interface
 * 
 * @export
 * @interface UserpermissionsApiInterface
 */
export interface UserpermissionsApiInterface {
    /**
     * A view for a feed\'s collection of user permissions.
     * @param {number} id 
     * @param {FeedUserPermissionRequest} feedUserPermissionRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserpermissionsApiInterface
     */
    userpermissionsCreateRaw(requestParameters: UserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedUserPermission>>;

    /**
     * A view for a feed\'s collection of user permissions.
     */
    userpermissionsCreate(requestParameters: UserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedUserPermission>;

    /**
     * A view for a feed\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserpermissionsApiInterface
     */
    userpermissionsDestroyRaw(requestParameters: UserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a feed\'s user permission.
     */
    userpermissionsDestroy(requestParameters: UserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a feed\'s collection of user permissions.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserpermissionsApiInterface
     */
    userpermissionsListRaw(requestParameters: UserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedUserPermissionList>>;

    /**
     * A view for a feed\'s collection of user permissions.
     */
    userpermissionsList(requestParameters: UserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedUserPermissionList>;

    /**
     * A view for a feed\'s user permission.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserpermissionsApiInterface
     */
    userpermissionsRetrieveRaw(requestParameters: UserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedUserPermission>>;

    /**
     * A view for a feed\'s user permission.
     */
    userpermissionsRetrieve(requestParameters: UserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedUserPermission>;

    /**
     * A view for the collection of feed-specific user permissions resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserpermissionsApiInterface
     */
    userpermissionsSearchListRaw(requestParameters: UserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedUserPermissionList>>;

    /**
     * A view for the collection of feed-specific user permissions resulting from a query search.
     */
    userpermissionsSearchList(requestParameters: UserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedUserPermissionList>;

}

/**
 * 
 */
export class UserpermissionsApi extends runtime.BaseAPI implements UserpermissionsApiInterface {

    /**
     * A view for a feed\'s collection of user permissions.
     */
    async userpermissionsCreateRaw(requestParameters: UserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userpermissionsCreate().'
            );
        }

        if (requestParameters['feedUserPermissionRequest'] == null) {
            throw new runtime.RequiredError(
                'feedUserPermissionRequest',
                'Required parameter "feedUserPermissionRequest" was null or undefined when calling userpermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedUserPermissionRequestToJSON(requestParameters['feedUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a feed\'s collection of user permissions.
     */
    async userpermissionsCreate(requestParameters: UserpermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedUserPermission> {
        const response = await this.userpermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a feed\'s user permission.
     */
    async userpermissionsDestroyRaw(requestParameters: UserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userpermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a feed\'s user permission.
     */
    async userpermissionsDestroy(requestParameters: UserpermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a feed\'s collection of user permissions.
     */
    async userpermissionsListRaw(requestParameters: UserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userpermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/{id}/userpermissions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeedUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for a feed\'s collection of user permissions.
     */
    async userpermissionsList(requestParameters: UserpermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedUserPermissionList> {
        const response = await this.userpermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a feed\'s user permission.
     */
    async userpermissionsRetrieveRaw(requestParameters: UserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedUserPermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userpermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userpermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedUserPermissionFromJSON(jsonValue));
    }

    /**
     * A view for a feed\'s user permission.
     */
    async userpermissionsRetrieve(requestParameters: UserpermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedUserPermission> {
        const response = await this.userpermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of feed-specific user permissions resulting from a query search.
     */
    async userpermissionsSearchListRaw(requestParameters: UserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedUserPermissionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userpermissionsSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/{id}/userpermissions/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeedUserPermissionListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of feed-specific user permissions resulting from a query search.
     */
    async userpermissionsSearchList(requestParameters: UserpermissionsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedUserPermissionList> {
        const response = await this.userpermissionsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const UserpermissionsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserpermissionsCreateFormatEnum = typeof UserpermissionsCreateFormatEnum[keyof typeof UserpermissionsCreateFormatEnum];
/**
 * @export
 */
export const UserpermissionsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserpermissionsDestroyFormatEnum = typeof UserpermissionsDestroyFormatEnum[keyof typeof UserpermissionsDestroyFormatEnum];
/**
 * @export
 */
export const UserpermissionsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserpermissionsListFormatEnum = typeof UserpermissionsListFormatEnum[keyof typeof UserpermissionsListFormatEnum];
/**
 * @export
 */
export const UserpermissionsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserpermissionsRetrieveFormatEnum = typeof UserpermissionsRetrieveFormatEnum[keyof typeof UserpermissionsRetrieveFormatEnum];
/**
 * @export
 */
export const UserpermissionsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserpermissionsSearchListFormatEnum = typeof UserpermissionsSearchListFormatEnum[keyof typeof UserpermissionsSearchListFormatEnum];
