/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedUserFileList,
  UserFile,
  UserFileRequest,
} from '../models/index';
import {
    PaginatedUserFileListFromJSON,
    PaginatedUserFileListToJSON,
    UserFileFromJSON,
    UserFileToJSON,
    UserFileRequestFromJSON,
    UserFileRequestToJSON,
} from '../models/index';

export interface UserfilesCreateRequest {
    format?: UserfilesCreateFormatEnum;
    userFileRequest?: UserFileRequest;
}

export interface UserfilesDestroyRequest {
    id: number;
    format?: UserfilesDestroyFormatEnum;
}

export interface UserfilesListRequest {
    format?: UserfilesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface UserfilesRetrieveRequest {
    id: number;
    format?: UserfilesRetrieveFormatEnum;
}

export interface UserfilesRetrieve0Request {
    id: string;
}

export interface UserfilesSearchListRequest {
    format?: UserfilesSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface UserfilesUpdateRequest {
    id: number;
    format?: UserfilesUpdateFormatEnum;
    userFileRequest?: UserFileRequest;
}

/**
 * UserfilesApi - interface
 * 
 * @export
 * @interface UserfilesApiInterface
 */
export interface UserfilesApiInterface {
    /**
     * A view for the collection of user files.
     * @param {'collection+json' | 'json'} [format] 
     * @param {UserFileRequest} [userFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserfilesApiInterface
     */
    userfilesCreateRaw(requestParameters: UserfilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFile>>;

    /**
     * A view for the collection of user files.
     */
    userfilesCreate(requestParameters: UserfilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFile>;

    /**
     * A user file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserfilesApiInterface
     */
    userfilesDestroyRaw(requestParameters: UserfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A user file view.
     */
    userfilesDestroy(requestParameters: UserfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the collection of user files.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserfilesApiInterface
     */
    userfilesListRaw(requestParameters: UserfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserFileList>>;

    /**
     * A view for the collection of user files.
     */
    userfilesList(requestParameters: UserfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserFileList>;

    /**
     * A user file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserfilesApiInterface
     */
    userfilesRetrieveRaw(requestParameters: UserfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFile>>;

    /**
     * A user file view.
     */
    userfilesRetrieve(requestParameters: UserfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFile>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserfilesApiInterface
     */
    userfilesRetrieve_1Raw(requestParameters: UserfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    userfilesRetrieve_1(requestParameters: UserfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the collection of user files resulting from a query search.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserfilesApiInterface
     */
    userfilesSearchListRaw(requestParameters: UserfilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserFileList>>;

    /**
     * A view for the collection of user files resulting from a query search.
     */
    userfilesSearchList(requestParameters: UserfilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserFileList>;

    /**
     * A user file view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {UserFileRequest} [userFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserfilesApiInterface
     */
    userfilesUpdateRaw(requestParameters: UserfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFile>>;

    /**
     * A user file view.
     */
    userfilesUpdate(requestParameters: UserfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFile>;

}

/**
 * 
 */
export class UserfilesApi extends runtime.BaseAPI implements UserfilesApiInterface {

    /**
     * A view for the collection of user files.
     */
    async userfilesCreateRaw(requestParameters: UserfilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFile>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userfiles/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserFileRequestToJSON(requestParameters['userFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFileFromJSON(jsonValue));
    }

    /**
     * A view for the collection of user files.
     */
    async userfilesCreate(requestParameters: UserfilesCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFile> {
        const response = await this.userfilesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A user file view.
     */
    async userfilesDestroyRaw(requestParameters: UserfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userfilesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userfiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A user file view.
     */
    async userfilesDestroy(requestParameters: UserfilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userfilesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for the collection of user files.
     */
    async userfilesListRaw(requestParameters: UserfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserFileList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userfiles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of user files.
     */
    async userfilesList(requestParameters: UserfilesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserFileList> {
        const response = await this.userfilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A user file view.
     */
    async userfilesRetrieveRaw(requestParameters: UserfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userfilesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userfiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFileFromJSON(jsonValue));
    }

    /**
     * A user file view.
     */
    async userfilesRetrieve(requestParameters: UserfilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFile> {
        const response = await this.userfilesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async userfilesRetrieve_1Raw(requestParameters: UserfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userfilesRetrieve_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userfiles/{id}/.`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overriden to be able to make a GET request to an actual file resource.
     */
    async userfilesRetrieve_1(requestParameters: UserfilesRetrieve0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userfilesRetrieve_1Raw(requestParameters, initOverrides);
    }

    /**
     * A view for the collection of user files resulting from a query search.
     */
    async userfilesSearchListRaw(requestParameters: UserfilesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserFileList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userfiles/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserFileListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of user files resulting from a query search.
     */
    async userfilesSearchList(requestParameters: UserfilesSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserFileList> {
        const response = await this.userfilesSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A user file view.
     */
    async userfilesUpdateRaw(requestParameters: UserfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userfilesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/userfiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserFileRequestToJSON(requestParameters['userFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFileFromJSON(jsonValue));
    }

    /**
     * A user file view.
     */
    async userfilesUpdate(requestParameters: UserfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFile> {
        const response = await this.userfilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const UserfilesCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserfilesCreateFormatEnum = typeof UserfilesCreateFormatEnum[keyof typeof UserfilesCreateFormatEnum];
/**
 * @export
 */
export const UserfilesDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserfilesDestroyFormatEnum = typeof UserfilesDestroyFormatEnum[keyof typeof UserfilesDestroyFormatEnum];
/**
 * @export
 */
export const UserfilesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserfilesListFormatEnum = typeof UserfilesListFormatEnum[keyof typeof UserfilesListFormatEnum];
/**
 * @export
 */
export const UserfilesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserfilesRetrieveFormatEnum = typeof UserfilesRetrieveFormatEnum[keyof typeof UserfilesRetrieveFormatEnum];
/**
 * @export
 */
export const UserfilesSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserfilesSearchListFormatEnum = typeof UserfilesSearchListFormatEnum[keyof typeof UserfilesSearchListFormatEnum];
/**
 * @export
 */
export const UserfilesUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type UserfilesUpdateFormatEnum = typeof UserfilesUpdateFormatEnum[keyof typeof UserfilesUpdateFormatEnum];
