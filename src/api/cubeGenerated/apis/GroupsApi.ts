/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Group,
  GroupRequest,
  GroupUser,
  GroupUserRequest,
  PaginatedGroupList,
  PaginatedGroupUserList,
} from '../models/index';
import {
    GroupFromJSON,
    GroupToJSON,
    GroupRequestFromJSON,
    GroupRequestToJSON,
    GroupUserFromJSON,
    GroupUserToJSON,
    GroupUserRequestFromJSON,
    GroupUserRequestToJSON,
    PaginatedGroupListFromJSON,
    PaginatedGroupListToJSON,
    PaginatedGroupUserListFromJSON,
    PaginatedGroupUserListToJSON,
} from '../models/index';

export interface GroupsCreateRequest {
    groupRequest: GroupRequest;
    format?: GroupsCreateFormatEnum;
}

export interface GroupsDestroyRequest {
    id: number;
    format?: GroupsDestroyFormatEnum;
}

export interface GroupsListRequest {
    format?: GroupsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface GroupsRetrieveRequest {
    id: number;
    format?: GroupsRetrieveFormatEnum;
}

export interface GroupsSearchListRequest {
    format?: GroupsSearchListFormatEnum;
    id?: number;
    limit?: number;
    name?: string;
    nameIcontains?: string;
    offset?: number;
}

export interface GroupsUsersCreateRequest {
    id: number;
    groupUserRequest: GroupUserRequest;
    format?: GroupsUsersCreateFormatEnum;
}

export interface GroupsUsersDestroyRequest {
    id: number;
    format?: GroupsUsersDestroyFormatEnum;
}

export interface GroupsUsersListRequest {
    id: number;
    format?: GroupsUsersListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface GroupsUsersRetrieveRequest {
    id: number;
    format?: GroupsUsersRetrieveFormatEnum;
}

export interface GroupsUsersSearchListRequest {
    id: number;
    format?: GroupsUsersSearchListFormatEnum;
    limit?: number;
    offset?: number;
}

/**
 * GroupsApi - interface
 * 
 * @export
 * @interface GroupsApiInterface
 */
export interface GroupsApiInterface {
    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     * @param {GroupRequest} groupRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsCreateRaw(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>>;

    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     */
    groupsCreate(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group>;

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsDestroyRaw(requestParameters: GroupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     */
    groupsDestroy(requestParameters: GroupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsListRaw(requestParameters: GroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupList>>;

    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     */
    groupsList(requestParameters: GroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupList>;

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsRetrieveRaw(requestParameters: GroupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>>;

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     */
    groupsRetrieve(requestParameters: GroupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group>;

    /**
     * A view for the collection of groups resulting from a query search.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {string} [name] 
     * @param {string} [nameIcontains] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsSearchListRaw(requestParameters: GroupsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupList>>;

    /**
     * A view for the collection of groups resulting from a query search.
     */
    groupsSearchList(requestParameters: GroupsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupList>;

    /**
     * A view for a group-specific collection of group users.
     * @param {number} id 
     * @param {GroupUserRequest} groupUserRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsUsersCreateRaw(requestParameters: GroupsUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupUser>>;

    /**
     * A view for a group-specific collection of group users.
     */
    groupsUsersCreate(requestParameters: GroupsUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupUser>;

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsUsersDestroyRaw(requestParameters: GroupsUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     */
    groupsUsersDestroy(requestParameters: GroupsUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for a group-specific collection of group users.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsUsersListRaw(requestParameters: GroupsUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupUserList>>;

    /**
     * A view for a group-specific collection of group users.
     */
    groupsUsersList(requestParameters: GroupsUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupUserList>;

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsUsersRetrieveRaw(requestParameters: GroupsUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupUser>>;

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     */
    groupsUsersRetrieve(requestParameters: GroupsUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupUser>;

    /**
     * A view for the collection of group users resulting from a query search.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsUsersSearchListRaw(requestParameters: GroupsUsersSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupUserList>>;

    /**
     * A view for the collection of group users resulting from a query search.
     */
    groupsUsersSearchList(requestParameters: GroupsUsersSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupUserList>;

}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI implements GroupsApiInterface {

    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     */
    async groupsCreateRaw(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupRequest'] == null) {
            throw new runtime.RequiredError(
                'groupRequest',
                'Required parameter "groupRequest" was null or undefined when calling groupsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRequestToJSON(requestParameters['groupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     */
    async groupsCreate(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     */
    async groupsDestroyRaw(requestParameters: GroupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     */
    async groupsDestroy(requestParameters: GroupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     */
    async groupsListRaw(requestParameters: GroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGroupListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of groups that can be used by ChRIS admins to add a new group through a REST API (alternative to the HTML-based admin site).
     */
    async groupsList(requestParameters: GroupsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupList> {
        const response = await this.groupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     */
    async groupsRetrieveRaw(requestParameters: GroupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * A view for a group that can be used by ChRIS admins to delete the group through a REST API.
     */
    async groupsRetrieve(requestParameters: GroupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of groups resulting from a query search.
     */
    async groupsSearchListRaw(requestParameters: GroupsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameIcontains'] != null) {
            queryParameters['name_icontains'] = requestParameters['nameIcontains'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGroupListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of groups resulting from a query search.
     */
    async groupsSearchList(requestParameters: GroupsSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupList> {
        const response = await this.groupsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a group-specific collection of group users.
     */
    async groupsUsersCreateRaw(requestParameters: GroupsUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupUser>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsUsersCreate().'
            );
        }

        if (requestParameters['groupUserRequest'] == null) {
            throw new runtime.RequiredError(
                'groupUserRequest',
                'Required parameter "groupUserRequest" was null or undefined when calling groupsUsersCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/{id}/users/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUserRequestToJSON(requestParameters['groupUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupUserFromJSON(jsonValue));
    }

    /**
     * A view for a group-specific collection of group users.
     */
    async groupsUsersCreate(requestParameters: GroupsUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupUser> {
        const response = await this.groupsUsersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     */
    async groupsUsersDestroyRaw(requestParameters: GroupsUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsUsersDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     */
    async groupsUsersDestroy(requestParameters: GroupsUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsUsersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for a group-specific collection of group users.
     */
    async groupsUsersListRaw(requestParameters: GroupsUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupUserList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsUsersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/{id}/users/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGroupUserListFromJSON(jsonValue));
    }

    /**
     * A view for a group-specific collection of group users.
     */
    async groupsUsersList(requestParameters: GroupsUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupUserList> {
        const response = await this.groupsUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     */
    async groupsUsersRetrieveRaw(requestParameters: GroupsUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupUser>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsUsersRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupUserFromJSON(jsonValue));
    }

    /**
     * A view for a group-user relationship that can be used by ChRIS admins to delete a user from a group through a REST API.
     */
    async groupsUsersRetrieve(requestParameters: GroupsUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupUser> {
        const response = await this.groupsUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of group users resulting from a query search.
     */
    async groupsUsersSearchListRaw(requestParameters: GroupsUsersSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupUserList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsUsersSearchList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/groups/{id}/users/search/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGroupUserListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of group users resulting from a query search.
     */
    async groupsUsersSearchList(requestParameters: GroupsUsersSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupUserList> {
        const response = await this.groupsUsersSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GroupsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsCreateFormatEnum = typeof GroupsCreateFormatEnum[keyof typeof GroupsCreateFormatEnum];
/**
 * @export
 */
export const GroupsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsDestroyFormatEnum = typeof GroupsDestroyFormatEnum[keyof typeof GroupsDestroyFormatEnum];
/**
 * @export
 */
export const GroupsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsListFormatEnum = typeof GroupsListFormatEnum[keyof typeof GroupsListFormatEnum];
/**
 * @export
 */
export const GroupsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsRetrieveFormatEnum = typeof GroupsRetrieveFormatEnum[keyof typeof GroupsRetrieveFormatEnum];
/**
 * @export
 */
export const GroupsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsSearchListFormatEnum = typeof GroupsSearchListFormatEnum[keyof typeof GroupsSearchListFormatEnum];
/**
 * @export
 */
export const GroupsUsersCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsUsersCreateFormatEnum = typeof GroupsUsersCreateFormatEnum[keyof typeof GroupsUsersCreateFormatEnum];
/**
 * @export
 */
export const GroupsUsersDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsUsersDestroyFormatEnum = typeof GroupsUsersDestroyFormatEnum[keyof typeof GroupsUsersDestroyFormatEnum];
/**
 * @export
 */
export const GroupsUsersListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsUsersListFormatEnum = typeof GroupsUsersListFormatEnum[keyof typeof GroupsUsersListFormatEnum];
/**
 * @export
 */
export const GroupsUsersRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsUsersRetrieveFormatEnum = typeof GroupsUsersRetrieveFormatEnum[keyof typeof GroupsUsersRetrieveFormatEnum];
/**
 * @export
 */
export const GroupsUsersSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type GroupsUsersSearchListFormatEnum = typeof GroupsUsersSearchListFormatEnum[keyof typeof GroupsUsersSearchListFormatEnum];
