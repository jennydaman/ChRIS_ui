/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedFeedList,
  PaginatedTagList,
  PaginatedTaggingList,
  Tag,
  TagRequest,
  Tagging,
} from '../models/index';
import {
    PaginatedFeedListFromJSON,
    PaginatedFeedListToJSON,
    PaginatedTagListFromJSON,
    PaginatedTagListToJSON,
    PaginatedTaggingListFromJSON,
    PaginatedTaggingListToJSON,
    TagFromJSON,
    TagToJSON,
    TagRequestFromJSON,
    TagRequestToJSON,
    TaggingFromJSON,
    TaggingToJSON,
} from '../models/index';

export interface TagsCreateRequest {
    tagRequest: TagRequest;
    format?: TagsCreateFormatEnum;
}

export interface TagsDestroyRequest {
    id: number;
    format?: TagsDestroyFormatEnum;
}

export interface TagsFeedsListRequest {
    id: number;
    format?: TagsFeedsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface TagsListRequest {
    format?: TagsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface TagsList2Request {
    id: number;
    format?: TagsList2FormatEnum;
    limit?: number;
    offset?: number;
}

export interface TagsRetrieveRequest {
    id: number;
    format?: TagsRetrieveFormatEnum;
}

export interface TagsSearchListRequest {
    color?: string;
    format?: TagsSearchListFormatEnum;
    id?: number;
    limit?: number;
    name?: string;
    offset?: number;
    ownerUsername?: string;
}

export interface TagsTaggingsCreateRequest {
    id: number;
    format?: TagsTaggingsCreateFormatEnum;
}

export interface TagsTaggingsListRequest {
    id: number;
    format?: TagsTaggingsListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface TagsUpdateRequest {
    id: number;
    tagRequest: TagRequest;
    format?: TagsUpdateFormatEnum;
}

/**
 * TagsApi - interface
 * 
 * @export
 * @interface TagsApiInterface
 */
export interface TagsApiInterface {
    /**
     * A view for the collection of tags.
     * @param {TagRequest} tagRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsCreateRaw(requestParameters: TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>>;

    /**
     * A view for the collection of tags.
     */
    tagsCreate(requestParameters: TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag>;

    /**
     * A tag view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsDestroyRaw(requestParameters: TagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A tag view.
     */
    tagsDestroy(requestParameters: TagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A view for the tag-specific collection of feeds.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsFeedsListRaw(requestParameters: TagsFeedsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedList>>;

    /**
     * A view for the tag-specific collection of feeds.
     */
    tagsFeedsList(requestParameters: TagsFeedsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedList>;

    /**
     * A view for the collection of tags.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsListRaw(requestParameters: TagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTagList>>;

    /**
     * A view for the collection of tags.
     */
    tagsList(requestParameters: TagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTagList>;

    /**
     * A view for a feed-specific collection of user-specific tags.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsList2Raw(requestParameters: TagsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTagList>>;

    /**
     * A view for a feed-specific collection of user-specific tags.
     */
    tagsList2(requestParameters: TagsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTagList>;

    /**
     * A tag view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsRetrieveRaw(requestParameters: TagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>>;

    /**
     * A tag view.
     */
    tagsRetrieve(requestParameters: TagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag>;

    /**
     * A view for the collection of tags resulting from a query search.
     * @param {string} [color] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {string} [name] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ownerUsername] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsSearchListRaw(requestParameters: TagsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTagList>>;

    /**
     * A view for the collection of tags resulting from a query search.
     */
    tagsSearchList(requestParameters: TagsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTagList>;

    /**
     * A view for the collection of tag-specific taggings.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsTaggingsCreateRaw(requestParameters: TagsTaggingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tagging>>;

    /**
     * A view for the collection of tag-specific taggings.
     */
    tagsTaggingsCreate(requestParameters: TagsTaggingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tagging>;

    /**
     * A view for the collection of tag-specific taggings.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsTaggingsListRaw(requestParameters: TagsTaggingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTaggingList>>;

    /**
     * A view for the collection of tag-specific taggings.
     */
    tagsTaggingsList(requestParameters: TagsTaggingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTaggingList>;

    /**
     * A tag view.
     * @param {number} id 
     * @param {TagRequest} tagRequest 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    tagsUpdateRaw(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>>;

    /**
     * A tag view.
     */
    tagsUpdate(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag>;

}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI implements TagsApiInterface {

    /**
     * A view for the collection of tags.
     */
    async tagsCreateRaw(requestParameters: TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['tagRequest'] == null) {
            throw new runtime.RequiredError(
                'tagRequest',
                'Required parameter "tagRequest" was null or undefined when calling tagsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagRequestToJSON(requestParameters['tagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * A view for the collection of tags.
     */
    async tagsCreate(requestParameters: TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.tagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A tag view.
     */
    async tagsDestroyRaw(requestParameters: TagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A tag view.
     */
    async tagsDestroy(requestParameters: TagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tagsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A view for the tag-specific collection of feeds.
     */
    async tagsFeedsListRaw(requestParameters: TagsFeedsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagsFeedsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/{id}/feeds/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeedListFromJSON(jsonValue));
    }

    /**
     * A view for the tag-specific collection of feeds.
     */
    async tagsFeedsList(requestParameters: TagsFeedsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedList> {
        const response = await this.tagsFeedsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of tags.
     */
    async tagsListRaw(requestParameters: TagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTagList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTagListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of tags.
     */
    async tagsList(requestParameters: TagsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTagList> {
        const response = await this.tagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for a feed-specific collection of user-specific tags.
     */
    async tagsList2Raw(requestParameters: TagsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTagList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagsList2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/{id}/tags/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTagListFromJSON(jsonValue));
    }

    /**
     * A view for a feed-specific collection of user-specific tags.
     */
    async tagsList2(requestParameters: TagsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTagList> {
        const response = await this.tagsList2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A tag view.
     */
    async tagsRetrieveRaw(requestParameters: TagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * A tag view.
     */
    async tagsRetrieve(requestParameters: TagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.tagsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of tags resulting from a query search.
     */
    async tagsSearchListRaw(requestParameters: TagsSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTagList>> {
        const queryParameters: any = {};

        if (requestParameters['color'] != null) {
            queryParameters['color'] = requestParameters['color'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['ownerUsername'] != null) {
            queryParameters['owner_username'] = requestParameters['ownerUsername'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTagListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of tags resulting from a query search.
     */
    async tagsSearchList(requestParameters: TagsSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTagList> {
        const response = await this.tagsSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of tag-specific taggings.
     */
    async tagsTaggingsCreateRaw(requestParameters: TagsTaggingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tagging>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagsTaggingsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/{id}/taggings/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaggingFromJSON(jsonValue));
    }

    /**
     * A view for the collection of tag-specific taggings.
     */
    async tagsTaggingsCreate(requestParameters: TagsTaggingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tagging> {
        const response = await this.tagsTaggingsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of tag-specific taggings.
     */
    async tagsTaggingsListRaw(requestParameters: TagsTaggingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTaggingList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagsTaggingsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/{id}/taggings/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTaggingListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of tag-specific taggings.
     */
    async tagsTaggingsList(requestParameters: TagsTaggingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTaggingList> {
        const response = await this.tagsTaggingsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A tag view.
     */
    async tagsUpdateRaw(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagsUpdate().'
            );
        }

        if (requestParameters['tagRequest'] == null) {
            throw new runtime.RequiredError(
                'tagRequest',
                'Required parameter "tagRequest" was null or undefined when calling tagsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/tags/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagRequestToJSON(requestParameters['tagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * A tag view.
     */
    async tagsUpdate(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.tagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TagsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsCreateFormatEnum = typeof TagsCreateFormatEnum[keyof typeof TagsCreateFormatEnum];
/**
 * @export
 */
export const TagsDestroyFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsDestroyFormatEnum = typeof TagsDestroyFormatEnum[keyof typeof TagsDestroyFormatEnum];
/**
 * @export
 */
export const TagsFeedsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsFeedsListFormatEnum = typeof TagsFeedsListFormatEnum[keyof typeof TagsFeedsListFormatEnum];
/**
 * @export
 */
export const TagsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsListFormatEnum = typeof TagsListFormatEnum[keyof typeof TagsListFormatEnum];
/**
 * @export
 */
export const TagsList2FormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsList2FormatEnum = typeof TagsList2FormatEnum[keyof typeof TagsList2FormatEnum];
/**
 * @export
 */
export const TagsRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsRetrieveFormatEnum = typeof TagsRetrieveFormatEnum[keyof typeof TagsRetrieveFormatEnum];
/**
 * @export
 */
export const TagsSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsSearchListFormatEnum = typeof TagsSearchListFormatEnum[keyof typeof TagsSearchListFormatEnum];
/**
 * @export
 */
export const TagsTaggingsCreateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsTaggingsCreateFormatEnum = typeof TagsTaggingsCreateFormatEnum[keyof typeof TagsTaggingsCreateFormatEnum];
/**
 * @export
 */
export const TagsTaggingsListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsTaggingsListFormatEnum = typeof TagsTaggingsListFormatEnum[keyof typeof TagsTaggingsListFormatEnum];
/**
 * @export
 */
export const TagsUpdateFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type TagsUpdateFormatEnum = typeof TagsUpdateFormatEnum[keyof typeof TagsUpdateFormatEnum];
