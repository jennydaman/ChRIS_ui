/* tslint:disable */
/* eslint-disable */
/**
 * ChRIS Research Integration System: Ultron BackEnd (CUBE) API
 * The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.
 *
 * The version of the OpenAPI document: 0.0.0+unknown
 * Contact: dev@babymri.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComputeResource,
  PaginatedComputeResourceList,
} from '../models/index';
import {
    ComputeResourceFromJSON,
    ComputeResourceToJSON,
    PaginatedComputeResourceListFromJSON,
    PaginatedComputeResourceListToJSON,
} from '../models/index';

export interface ComputeresourcesListRequest {
    format?: ComputeresourcesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface ComputeresourcesRetrieveRequest {
    id: number;
    format?: ComputeresourcesRetrieveFormatEnum;
}

export interface ComputeresourcesSearchListRequest {
    description?: string;
    format?: ComputeresourcesSearchListFormatEnum;
    id?: number;
    limit?: number;
    name?: string;
    nameExact?: string;
    offset?: number;
    pluginId?: string;
}

/**
 * ComputeresourcesApi - interface
 * 
 * @export
 * @interface ComputeresourcesApiInterface
 */
export interface ComputeresourcesApiInterface {
    /**
     * A view for the collection of compute resources.
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputeresourcesApiInterface
     */
    computeresourcesListRaw(requestParameters: ComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>>;

    /**
     * A view for the collection of compute resources.
     */
    computeresourcesList(requestParameters: ComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList>;

    /**
     * A compute resource view.
     * @param {number} id 
     * @param {'collection+json' | 'json'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputeresourcesApiInterface
     */
    computeresourcesRetrieveRaw(requestParameters: ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeResource>>;

    /**
     * A compute resource view.
     */
    computeresourcesRetrieve(requestParameters: ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeResource>;

    /**
     * A view for the collection of compute resources resulting from a query search.
     * @param {string} [description] 
     * @param {'collection+json' | 'json'} [format] 
     * @param {number} [id] 
     * @param {number} [limit] Number of results to return per page.
     * @param {string} [name] 
     * @param {string} [nameExact] 
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [pluginId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputeresourcesApiInterface
     */
    computeresourcesSearchListRaw(requestParameters: ComputeresourcesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>>;

    /**
     * A view for the collection of compute resources resulting from a query search.
     */
    computeresourcesSearchList(requestParameters: ComputeresourcesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList>;

}

/**
 * 
 */
export class ComputeresourcesApi extends runtime.BaseAPI implements ComputeresourcesApiInterface {

    /**
     * A view for the collection of compute resources.
     */
    async computeresourcesListRaw(requestParameters: ComputeresourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/computeresources/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedComputeResourceListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of compute resources.
     */
    async computeresourcesList(requestParameters: ComputeresourcesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList> {
        const response = await this.computeresourcesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A compute resource view.
     */
    async computeresourcesRetrieveRaw(requestParameters: ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeResource>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling computeresourcesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/computeresources/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputeResourceFromJSON(jsonValue));
    }

    /**
     * A compute resource view.
     */
    async computeresourcesRetrieve(requestParameters: ComputeresourcesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeResource> {
        const response = await this.computeresourcesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A view for the collection of compute resources resulting from a query search.
     */
    async computeresourcesSearchListRaw(requestParameters: ComputeresourcesSearchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedComputeResourceList>> {
        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameExact'] != null) {
            queryParameters['name_exact'] = requestParameters['nameExact'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pluginId'] != null) {
            queryParameters['plugin_id'] = requestParameters['pluginId'];
        }

        const headerParameters: runtime.HTTPHeaders = {Accept: 'application/json'};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/computeresources/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedComputeResourceListFromJSON(jsonValue));
    }

    /**
     * A view for the collection of compute resources resulting from a query search.
     */
    async computeresourcesSearchList(requestParameters: ComputeresourcesSearchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedComputeResourceList> {
        const response = await this.computeresourcesSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ComputeresourcesListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ComputeresourcesListFormatEnum = typeof ComputeresourcesListFormatEnum[keyof typeof ComputeresourcesListFormatEnum];
/**
 * @export
 */
export const ComputeresourcesRetrieveFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ComputeresourcesRetrieveFormatEnum = typeof ComputeresourcesRetrieveFormatEnum[keyof typeof ComputeresourcesRetrieveFormatEnum];
/**
 * @export
 */
export const ComputeresourcesSearchListFormatEnum = {
    Collectionjson: 'collection+json',
    Json: 'json'
} as const;
export type ComputeresourcesSearchListFormatEnum = typeof ComputeresourcesSearchListFormatEnum[keyof typeof ComputeresourcesSearchListFormatEnum];
